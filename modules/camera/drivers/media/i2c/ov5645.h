/*
 * Support for ov5645 Camera Sensor.
 *
 * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 */

#ifndef __OV5645_H__
#define __OV5645_H__

#include <linux/kernel.h>
#include <linux/types.h>
#include <linux/i2c.h>
#include <linux/delay.h>
#include <linux/videodev2.h>
#include <linux/spinlock.h>
#include <media/v4l2-subdev.h>
#include <media/v4l2-device.h>
#include <media/v4l2-chip-ident.h>
#include <linux/v4l2-mediabus.h>
#include <media/media-entity.h>
#include <linux/atomisp_platform.h>
#include <linux/atomisp.h>

#define OV5645_NAME	"ov5645"

#define V4L2_IDENT_OV5645 1111
#define	LAST_REG_SETING	{0xffff, 0xff}

#define OV5645_FOCAL_LENGTH_NUM	439	/*4.39mm*/
#define OV5645_FOCAL_LENGTH_DEM	100
#define OV5645_F_NUMBER_DEFAULT_NUM	24
#define OV5645_F_NUMBER_DEM	10
#define OV5645_FOCUS_ZONE_ARRAY_WIDTH	80
#define OV5645_FOCUS_ZONE_ARRAY_HEIGHT	60

#define OV5645_XVCLK		1920
#define OV5645_AE_TARGET	45
#define OV5645_DEFAULT_GAIN	50
#define OV5645_DEFAULT_SHUTTER	1000

/*
 * focal length bits definition:
 * bits 31-16: numerator, bits 15-0: denominator
 */
#define OV5645_FOCAL_LENGTH_DEFAULT 0xD00064

/*
 * current f-number bits definition:
 * bits 31-16: numerator, bits 15-0: denominator
 */
#define OV5645_F_NUMBER_DEFAULT 0x18000a

/*
 * f-number range bits definition:
 * bits 31-24: max f-number numerator
 * bits 23-16: max f-number denominator
 * bits 15-8: min f-number numerator
 * bits 7-0: min f-number denominator
 */
#define OV5645_F_NUMBER_RANGE 0x180a180a

/* #defines for register writes and register array processing */
#define MISENSOR_8BIT		1
#define MISENSOR_16BIT		2
#define MISENSOR_32BIT		4

#define MISENSOR_TOK_TERM	0xf000	/* terminating token for reg list */
#define MISENSOR_TOK_DELAY	0xfe00	/* delay token for reg list */
#define MISENSOR_TOK_FWLOAD	0xfd00	/* token indicating load FW */
#define MISENSOR_TOK_POLL	0xfc00	/* token indicating poll instruction */

#define I2C_RETRY_COUNT		5
#define MSG_LEN_OFFSET		2

#define OV5645_REG_PID		0x300a
#define OV5645_REG_SYS_RESET	0x3000
#define OV5645_REG_FW_START	0x8000
#define OV5645_REG_FOCUS_MODE	0x3022	/* focus mode reg */
#define OV5645_REG_FOCUS_ZONE_X	0x3024	/* X coordinate of focus zone center */
#define OV5645_REG_FOCUS_ZONE_Y	0x3025	/* Y coordinate of focus zone center */
#define OV5645_REG_FOCUS_STATUS	0x3029	/* focus status reg */

/* system pll control reg */
#define OV5645_REG_PLL_CTRL_0	0x3034
#define OV5645_REG_PLL_CTRL_1	0x3035
#define OV5645_REG_PLL_CTRL_2	0x3036
#define OV5645_REG_PLL_CTRL_3	0x3037

/* pad clock divider for SCCB clock */
#define OV5645_REG_CLK_DIVIDER	0x3108

/* total horizontal size reg */
#define OV5645_REG_TIMING_HTS	0x380c

/* total vertical size reg */
#define OV5645_REG_TIMING_VTS	0x380e

/* exposure output reg */
#define OV5645_REG_EXPOSURE_0	0x3500
#define OV5645_REG_EXPOSURE_1	0x3502

/* gain reg */
#define OV5645_REG_GAIN	0x350a

/* light frequency control reg */
#define OV5645_REG_LIGHT_CTRL_0	0x3c01
#define OV5645_REG_LIGHT_CTRL_1	0x3c00
#define OV5645_REG_LIGHT_CTRL_2	0x3c0c

/* light frequency */
#define OV5645_LIGHT_50HZ	50
#define OV5645_LIGHT_60HZ	60

/* automatic banding filter */
#define OV5645_AUTO_BAND	0x80

/* 60HZ band step reg and 60HZ max bands */
#define OV5645_REG_B60_STEP	0x3a0a
#define OV5645_REG_B60_MAX	0x3a0d

/* 50HZ band step reg and 50HZ max bands */
#define OV5645_REG_B50_STEP	0x3a08
#define OV5645_REG_B50_MAX	0x3a0e

/* AEC domain control reg */
#define OV5645_REG_AE_STAB_IN_H	0x3a0f	/* stable in high */
#define OV5645_REG_AE_STAB_IN_L	0x3a10	/* stable in low */
#define OV5645_REG_AE_STAB_OUT_H	0x3a1b	/* stable out high */
#define OV5645_REG_AE_STAB_OUT_L	0x3a1e	/* stable out low */
#define OV5645_REG_AE_FAST_H	0x3a11	/* fast zone high */
#define OV5645_REG_AE_FAST_L	0x3a1f	/* fast zone low */

/* AEC mode control reg */
#define OV5645_REG_AE_MODE_CTRL	0x3503

#define OV5645_AUTO_AG_AE	0x00	/* auto AG&AE */
#define OV5645_MANUAL_AG_AE	0x03	/* manual AG&AE */

/* AEC system control reg */
#define OV5645_REG_AE_SYS_CTRL	0x3a00

/* image exposure average readout reg */
#define OV5645_REG_AE_AVERAGE	0x56a1

/* frame control reg */
#define OV5645_REG_FRAME_CTRL	0x4202

#define OV5645_FRAME_START	0x00
#define OV5645_FRAME_STOP	0x0f

#define OV5645_MCU_RESET	0x20
#define OV5645_SINGLE_FOCUS	0x03
#define OV5645_CONTINUE_FOCUS	0x04
#define OV5645_PAUSE_FOCUS	0x06
#define OV5645_RELEASE_FOCUS	0x08
#define OV5645_RELAUNCH_FOCUS	0x12
#define OV5645_S_FOCUS_ZONE	0x81

/* focus firmware is downloaded but not to be initialized */
#define OV5645_FOCUS_FW_DL	0x7f
#define OV5645_FOCUS_FW_INIT	0x7e	/* focus firmware is initializing */
#define OV5645_FOCUS_FW_IDLE	0x70	/* focus firmware is idle */
#define OV5645_FOCUS_FW_RUN	0x00	/* focus firmware is running */
#define OV5645_FOCUS_FW_FINISH	0x10	/* focus is finished */

#define OV5645_REG_AWB_CTRL	0x3406

#define OV5645_AWB_GAIN_AUTO	0
#define OV5645_AWB_GAIN_MANUAL	1

#define MIN_SYSCLK		10
#define MIN_VTS			8
#define MIN_HTS			8
#define MIN_SHUTTER		0
#define MIN_GAIN		0

/* OV5645_DEVICE_ID */
#define OV5645_MOD_ID		0x5645

#define AF_FW_PATH	"OV5645_AF_FW.bin"

/* Supported resolutions */
enum {
	OV5645_RES_QVGA,
	OV5645_RES_DVGA,
	OV5645_RES_320P,
	OV5645_RES_360P,
	OV5645_RES_VGA,
	OV5645_RES_480P,
	OV5645_RES_720P,
	OV5645_RES_1080P,
	OV5645_RES_1088P,
	OV5645_RES_D3M,
	OV5645_RES_3M,
	OV5645_RES_D5M,
	OV5645_RES_5M,
};
#define OV5645_RES_5M_SIZE_H		2560
#define OV5645_RES_5M_SIZE_V		1920
#define OV5645_RES_D5M_SIZE_H		2496
#define OV5645_RES_D5M_SIZE_V		1664
#define OV5645_RES_D3M_SIZE_H		2112
#define OV5645_RES_D3M_SIZE_V		1408
#define OV5645_RES_3M_SIZE_H		2048
#define OV5645_RES_3M_SIZE_V		1536
#define OV5645_RES_1088P_SIZE_H		1920
#define OV5645_RES_1088P_SIZE_V		1088
#define OV5645_RES_1080P_SIZE_H		1920
#define OV5645_RES_1080P_SIZE_V		1080
#define OV5645_RES_720P_SIZE_H		1280
#define OV5645_RES_720P_SIZE_V		720
#define OV5645_RES_480P_SIZE_H		720
#define OV5645_RES_480P_SIZE_V		480
#define OV5645_RES_VGA_SIZE_H		640
#define OV5645_RES_VGA_SIZE_V		480
#define OV5645_RES_360P_SIZE_H		640
#define OV5645_RES_360P_SIZE_V		360
#define OV5645_RES_320P_SIZE_H		480
#define OV5645_RES_320P_SIZE_V		320
#define OV5645_RES_DVGA_SIZE_H		416
#define OV5645_RES_DVGA_SIZE_V		312
#define OV5645_RES_QVGA_SIZE_H		320
#define OV5645_RES_QVGA_SIZE_V		240

/*
 * struct misensor_reg - MI sensor  register format
 * @length: length of the register
 * @reg: 16-bit offset to register
 * @val: 8/16/32-bit register value
 * Define a structure for sensor register initialization values
 */
struct misensor_reg {
	u16 length;
	u16 reg;
	u32 val;	/* value or for read/mod/write */
};

struct regval_list {
	u16 reg_num;
	u8 value;
};

struct ov5645_device {
	struct v4l2_subdev sd;
	struct media_pad pad;
	struct v4l2_mbus_framefmt format;
	struct firmware *firmware;

	struct camera_sensor_platform_data *platform_data;
	int run_mode;
	int focus_mode;
	int night_mode;
	bool focus_mode_change;
	int color_effect;
	bool streaming;
	bool preview_ag_ae;
	u16 sensor_id;
	u8 sensor_revision;
	unsigned int ae_high;
	unsigned int ae_low;
	unsigned int preview_shutter;
	unsigned int preview_gain16;
	unsigned int average;
	unsigned int preview_sysclk;
	unsigned int preview_hts;
	unsigned int preview_vts;
	unsigned int res;
};

struct ov5645_priv_data {
	u32 port;
	u32 num_of_lane;
	u32 input_format;
	u32 raw_bayer_order;
};

struct ov5645_format_struct {
	u8 *desc;
	u32 pixelformat;
	struct regval_list *regs;
};

struct ov5645_res_struct {
	u8 *desc;
	int res;
	int width;
	int height;
	int fps;
	int skip_frames;
	bool used;
	struct regval_list *regs;
};

#define OV5645_MAX_WRITE_BUF_SIZE	32
struct ov5645_write_buffer {
	u16 addr;
	u8 data[OV5645_MAX_WRITE_BUF_SIZE];
};

struct ov5645_write_ctrl {
	int index;
	struct ov5645_write_buffer buffer;
};

struct ov5645_control {
	struct v4l2_queryctrl qc;
	int (*query)(struct v4l2_subdev *sd, s32 *value);
	int (*tweak)(struct v4l2_subdev *sd, int value);
};

#define N_ov5645_FMTS ARRAY_SIZE(ov5645_formats)

/*
 * Modes supported by the mt9m114 driver.
 * Please, keep them in ascending order.
 */
static struct ov5645_res_struct ov5645_res[] = {
	{
	.desc	= "QVGA",
	.res	= OV5645_RES_QVGA,
	.width	= 320,
	.height	= 240,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "DVGA",
	.res	= OV5645_RES_DVGA,
	.width	= 416,
	.height	= 312,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "320P",
	.res	= OV5645_RES_320P,
	.width	= 480,
	.height	= 320,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "360P",
	.res	= OV5645_RES_360P,
	.width	= 640,
	.height	= 360,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 5,
	},
	{
	.desc	= "VGA",
	.res	= OV5645_RES_VGA,
	.width	= 640,
	.height	= 480,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "480P",
	.res	= OV5645_RES_480P,
	.width	= 720,
	.height	= 480,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "720p",
	.res	= OV5645_RES_720P,
	.width	= 1280,
	.height	= 720,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "1080P",
	.res	= OV5645_RES_1080P,
	.width	= 1920,
	.height	= 1080,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "1088P",
	.res	= OV5645_RES_1088P,
	.width	= 1920,
	.height	= 1088,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "D3M",
	.res	= OV5645_RES_D3M,
	.width	= 2112,
	.height	= 1408,
	.fps	= 15,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "3M",
	.res	= OV5645_RES_3M,
	.width	= 2048,
	.height	= 1536,
	.fps	= 15,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 2,
	},
	{
	.desc	= "D5M",
	.res	= OV5645_RES_D5M,
	.width	= 2496,
	.height	= 1664,
	.fps	= 15,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 4,
	},
	{
	.desc	= "5M",
	.res	= OV5645_RES_5M,
	.width	= 2560,
	.height	= 1920,
	.fps	= 15,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 2,
	},
};
#define N_RES (ARRAY_SIZE(ov5645_res))

static const struct i2c_device_id ov5645_id[] = {
	{"ov5645", 0},
	{}
};
//Begin [song.yuanqiao@byd.com,2013-08-16]
//wb
static struct misensor_reg const ov5645_wb_auto[] = {

     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
     {MISENSOR_8BIT, 0x3406, 0x00},
     {MISENSOR_8BIT, 0x3400, 0x04},
     {MISENSOR_8BIT, 0x3401, 0x00},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x04},
     {MISENSOR_8BIT, 0x3405, 0x00},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
     {MISENSOR_TOK_TERM, 0, 0}

};
static struct misensor_reg const ov5645_wb_incandescent[] = {
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3 		//office 
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x04},
     {MISENSOR_8BIT, 0x3401, 0x10},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x08},
     {MISENSOR_8BIT, 0x3405, 0x40},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
     {MISENSOR_TOK_TERM, 0, 0}
};
static struct misensor_reg const ov5645_wb_sunny[] = {
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3   sunny
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x05},
     {MISENSOR_8BIT, 0x3401, 0xde},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x04},
     {MISENSOR_8BIT, 0x3405, 0x68},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
     {MISENSOR_TOK_TERM, 0, 0}
};
static struct misensor_reg const ov5645_wb_cloudy[] = {
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x06},
     {MISENSOR_8BIT, 0x3401, 0x40},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x04},
     {MISENSOR_8BIT, 0x3405, 0xe3},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
     {MISENSOR_TOK_TERM, 0, 0}
};
static struct misensor_reg const ov5645_wb_fluorescent[] = {
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3 home
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x05},
     {MISENSOR_8BIT, 0x3401, 0x27},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x07},
     {MISENSOR_8BIT, 0x3405, 0x44},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
     {MISENSOR_TOK_TERM, 0, 0}
};
/*
*
*lwl modify scene based on songyuanqiao
*/
//Scene mode
 static struct misensor_reg const ov5645_scene_mode_auto[] = 
 {
    
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
     {MISENSOR_8BIT, 0x3406, 0x00},
     {MISENSOR_8BIT, 0x3400, 0x04},
     {MISENSOR_8BIT, 0x3401, 0x00},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x04},
     {MISENSOR_8BIT, 0x3405, 0x00},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
     {MISENSOR_TOK_TERM, 0, 0}
	 
};
//cloudy
static struct misensor_reg const ov5645_scene_mode_fireworks[] = 
{
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x06},
     {MISENSOR_8BIT, 0x3401, 0x30},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x04},
     {MISENSOR_8BIT, 0x3405, 0x30},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
    {MISENSOR_TOK_TERM, 0,	0}
};
//landscape  based andy provided
static struct misensor_reg const ov5645_scene_mode_landscape[] = 
{
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3 home
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x04},
     {MISENSOR_8BIT, 0x3401, 0x00},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x06},
     {MISENSOR_8BIT, 0x3405, 0x50},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3

    {MISENSOR_TOK_TERM, 0,	0}
};
//sunny
static struct misensor_reg const ov5645_scene_mode_night[] = 
{
	{MISENSOR_8BIT, 0x3212, 0x03}, // start group 3 home
	{MISENSOR_8BIT, 0x3406, 0x01},
	{MISENSOR_8BIT, 0x3400, 0x06},
	{MISENSOR_8BIT, 0x3401, 0x10},
	{MISENSOR_8BIT, 0x3402, 0x04},
	{MISENSOR_8BIT, 0x3403, 0x00},
	{MISENSOR_8BIT, 0x3404, 0x04},
	{MISENSOR_8BIT, 0x3405, 0x48},
	{MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
	{MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
    {MISENSOR_TOK_TERM, 0,	0}
};
//office
static struct misensor_reg const ov5645_scene_mode_portrait[] = 
{
		{MISENSOR_8BIT, 0x3212, 0x03}, // start group 3   sunny
		{MISENSOR_8BIT, 0x3406, 0x01},
		{MISENSOR_8BIT, 0x3400, 0x06},
		{MISENSOR_8BIT, 0x3401, 0x10},
		{MISENSOR_8BIT, 0x3402, 0x04},
		{MISENSOR_8BIT, 0x3403, 0x00},
		{MISENSOR_8BIT, 0x3404, 0x04},
		{MISENSOR_8BIT, 0x3405, 0xa0},
		{MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
		{MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
		{MISENSOR_TOK_TERM, 0,	0}
};
//sunset
static struct misensor_reg const ov5645_scene_mode_sport[] = 
{
     {MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
     {MISENSOR_8BIT, 0x3406, 0x01},
     {MISENSOR_8BIT, 0x3400, 0x05},
     {MISENSOR_8BIT, 0x3401, 0x48},
     {MISENSOR_8BIT, 0x3402, 0x04},
     {MISENSOR_8BIT, 0x3403, 0x00},
     {MISENSOR_8BIT, 0x3404, 0x05},
     {MISENSOR_8BIT, 0x3405, 0xe0},
     {MISENSOR_8BIT, 0x3212, 0x13}, // end group 3
     {MISENSOR_8BIT, 0x3212, 0xa3}, // lanuch group 3
    {MISENSOR_TOK_TERM, 0,	0}
};

//End  [song.yuanqiao@byd.com,2013-08-16]

static struct misensor_reg const ov5645_standby_reg[] = {
	 {MISENSOR_8BIT,  0x300e, 0x58},     /* MIPI PHY power-down */
	 {MISENSOR_TOK_DELAY, {0}, 5},
	 {MISENSOR_8BIT,  0x3008, 0x42},	/* software powerdown */
	 {MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_wakeup_reg[] = {
	{MISENSOR_8BIT,  0x3008, 0x02},		/* software power-on */
	{MISENSOR_TOK_DELAY, {0}, 5},
	{MISENSOR_8BIT,  0x300e, 0x45},		/* MIPI PHY power-on */
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_normal_effect[] = {
	{MISENSOR_8BIT, 0x3212, 0x03},	/* start group 3 */
	{MISENSOR_8BIT, 0x5580, 0x06},
	{MISENSOR_8BIT, 0x5583, 0x3e},	/* sat U */
	{MISENSOR_8BIT, 0x5584, 0x2e},	/* sat V */
	{MISENSOR_8BIT, 0x5003, 0x08},
	{MISENSOR_8BIT, 0x3212, 0x13},	/* end group 3 */
	{MISENSOR_8BIT, 0x3212, 0xA3},	/* lanuch group 3 */
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_sepia_effect[] = {
	{MISENSOR_8BIT, 0x3212, 0x03},	/* start group 3 */
	{MISENSOR_8BIT, 0x5580, 0x1E},
	{MISENSOR_8BIT, 0x5583, 0x40},	/* sat U */
	{MISENSOR_8BIT, 0x5584, 0xA0},	/* sat V */
	{MISENSOR_8BIT, 0x5003, 0x08},
	{MISENSOR_8BIT, 0x3212, 0x13},	/* end group 3 */
	{MISENSOR_8BIT, 0x3212, 0xA3},	/* lanuch group 3 */
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_negative_effect[] = {
	{MISENSOR_8BIT, 0x3212, 0x03},	/* start group 3 */
	{MISENSOR_8BIT, 0x5580, 0x46},
	{MISENSOR_8BIT, 0x5583, 0x40},	/* sat U */
	{MISENSOR_8BIT, 0x5584, 0x10},	/* sat V */
	{MISENSOR_8BIT, 0x5003, 0x08},
	{MISENSOR_8BIT, 0x3212, 0x13},	/* end group 3 */
	{MISENSOR_8BIT, 0x3212, 0xA3},	/* lanuch group 3 */
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_bw_effect[] = {
	{MISENSOR_8BIT, 0x3212, 0x03},	/* start group 3 */
	{MISENSOR_8BIT, 0x5580, 0x1E},
	{MISENSOR_8BIT, 0x5583, 0x80},	/* sat U */
	{MISENSOR_8BIT, 0x5584, 0x80},	/* sat V */
	{MISENSOR_8BIT, 0x5003, 0x08},
	{MISENSOR_8BIT, 0x3212, 0x13},	/* end group 3 */
	{MISENSOR_8BIT, 0x3212, 0xA3},	/* lanuch group 3 */
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_blue_effect[] = {
	{MISENSOR_8BIT, 0x3212, 0x03},	/* start group 3 */
	{MISENSOR_8BIT, 0x5580, 0x1E},
	{MISENSOR_8BIT, 0x5583, 0xA0},	/* sat U */
	{MISENSOR_8BIT, 0x5584, 0x40},	/* sat V */
	{MISENSOR_8BIT, 0x5003, 0x08},
	{MISENSOR_8BIT, 0x3212, 0x13},	/* end group 3 */
	{MISENSOR_8BIT, 0x3212, 0xA3},	/* lanuch group 3 */
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_green_effect[] = {
	{MISENSOR_8BIT, 0x3212, 0x03},	/* start group 3 */
	{MISENSOR_8BIT, 0x5580, 0x1E},
	{MISENSOR_8BIT, 0x5583, 0x60},	/* sat U */
	{MISENSOR_8BIT, 0x5584, 0x60},	/* sat V */
	{MISENSOR_8BIT, 0x5003, 0x08},
	{MISENSOR_8BIT, 0x3212, 0x13},	/* end group 3 */
	{MISENSOR_8BIT, 0x3212, 0xA3},	/* lanuch group 3 */
	{MISENSOR_TOK_TERM, 0, 0}
};
/* 5M, yuv422, 2lanes, mipi, 12fps */
static struct misensor_reg const ov5645_5M_init[] = {   		
        {MISENSOR_8BIT, 0x3618, 0x04},                   		              		
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x21},
        {MISENSOR_8BIT, 0x3036, 0x68},
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3824, 0x01},
        {MISENSOR_8BIT, 0x460C, 0x20},
        {MISENSOR_8BIT, 0x300E, 0x45},
        {MISENSOR_8BIT, 0x3600, 0x08},                   		
        {MISENSOR_8BIT, 0x3601, 0x33},                   		
        {MISENSOR_8BIT, 0x3708, 0x63},                   		
        {MISENSOR_8BIT, 0x370c, 0xc0},
        {MISENSOR_8BIT, 0x3800, 0x00}, 
        {MISENSOR_8BIT, 0x3801, 0x00}, 
        {MISENSOR_8BIT, 0x3802, 0x00},                   		
        {MISENSOR_8BIT, 0x3803, 0x00},
        {MISENSOR_8BIT, 0x3804, 0x0a},
        {MISENSOR_8BIT, 0x3805, 0x3f},
        {MISENSOR_8BIT, 0x3806, 0x07},
        {MISENSOR_8BIT, 0x3807, 0x9f},
        {MISENSOR_8BIT, 0x3808, 0x0a},
        {MISENSOR_8BIT, 0x3809, 0x00},
        {MISENSOR_8BIT, 0x380a, 0x07},
        {MISENSOR_8BIT, 0x380b, 0x80},
        {MISENSOR_8BIT, 0x380c, 0x0a},
        {MISENSOR_8BIT, 0x380d, 0xb4},
        {MISENSOR_8BIT, 0x380e, 0x07},
        {MISENSOR_8BIT, 0x380f, 0xe8},
        {MISENSOR_8BIT, 0x3813, 0x06},
        {MISENSOR_8BIT, 0x3814, 0x11},
        {MISENSOR_8BIT, 0x3815, 0x11},
        {MISENSOR_8BIT, 0x3820, 0x41},
        {MISENSOR_8BIT, 0x3821, 0x07},
	//{MISENSOR_8BIT, 0x4514, 0x88},
        {MISENSOR_8BIT, 0x3a02, 0x07},
        {MISENSOR_8BIT, 0x3a03, 0xb0},
        {MISENSOR_8BIT, 0x3a08, 0x01},
        {MISENSOR_8BIT, 0x3a09, 0x27},
        {MISENSOR_8BIT, 0x3a0a, 0x00},
        {MISENSOR_8BIT, 0x3a0b, 0xf6},
        {MISENSOR_8BIT, 0x3a0e, 0x06},
        {MISENSOR_8BIT, 0x3a0d, 0x08},
        {MISENSOR_8BIT, 0x3a14, 0x07},
        {MISENSOR_8BIT, 0x3a15, 0xb0},
        {MISENSOR_8BIT, 0x3a18, 0x00},
        {MISENSOR_8BIT, 0x3a19, 0xf8},
        {MISENSOR_8BIT, 0x4004, 0x06},
        {MISENSOR_8BIT, 0x4005, 0x18},
	{MISENSOR_8BIT, 0x4514, 0x0},
        {MISENSOR_8BIT, 0x4837, 0x0b},
        {MISENSOR_8BIT, 0x3503, 0x03},
      //  {MISENSOR_8BIT, 0x3406, 0x01},
        //{MISENSOR_8BIT, 0x5583, 0x40},	/* sat U */
        {MISENSOR_8BIT, 0x5584, 0x30},	/* sat V */
        //{MISENSOR_8BIT, 0x5589, 0x28},
        //{MISENSOR_8BIT, 0x558b, 0x4c},
        {MISENSOR_TOK_TERM, 0, 0}
};

/* D5M, yuv422, 2lanes, mipi, 15fps */
static struct misensor_reg const ov5645_D5M_init[] = {
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3820, 0x40},
	{MISENSOR_8BIT, 0x3821, 0x06},
	{MISENSOR_8BIT, 0x3814, 0x11},
	{MISENSOR_8BIT, 0x3815, 0x11},
	{MISENSOR_8BIT, 0x3800, 0x00},
	{MISENSOR_8BIT, 0x3801, 0x00},	/* X start of input size. value is 0 */
	{MISENSOR_8BIT, 0x3802, 0x00},
	{MISENSOR_8BIT, 0x3803, 0x00},	/* Y start of input size. value is 0 */
	{MISENSOR_8BIT, 0x3804, 0x09},
	{MISENSOR_8BIT, 0x3805, 0xDF},	/* X end of input size. value is 2527 */
	{MISENSOR_8BIT, 0x3806, 0x06},
	{MISENSOR_8BIT, 0x3807, 0x87},	/* Y end of input size. value is 1671 */
	{MISENSOR_8BIT, 0x3808, 0x09},
	{MISENSOR_8BIT, 0x3809, 0xC0},	/* DVP output H_width, value is 2496 */
	{MISENSOR_8BIT, 0x380A, 0x06},
	{MISENSOR_8BIT, 0x380B, 0x80},	/* DVP output V_heigh, value is 1664 */
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x10},	/* X offset of pre-scaling */
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x04},	/* Y offset of pre-scaling */
	{MISENSOR_8BIT, 0x3618, 0x04},
	{MISENSOR_8BIT, 0x3612, 0x2B},
	{MISENSOR_8BIT, 0x3708, 0x64},
	{MISENSOR_8BIT, 0x3709, 0x12},
	{MISENSOR_8BIT, 0x370C, 0x00},
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x24},	/* 50HZ band steps */
	{MISENSOR_8BIT, 0x3A0A, 0x00},
	{MISENSOR_8BIT, 0x3A0B, 0xF3},	/* 60HZ band steps */
	{MISENSOR_8BIT, 0x3A0E, 0x08},	/* 50HZ max band in one frame */
	{MISENSOR_8BIT, 0x3A0D, 0x09},	/* 60HZ max band in one frame */
	{MISENSOR_8BIT, 0x4001, 0x02},	/* BLC start line */
	{MISENSOR_8BIT, 0x4004, 0x06},	/* BLC line number */
	{MISENSOR_8BIT, 0x3000, 0x00},	/* system reset */
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x00},	/* system reset */
	{MISENSOR_8BIT, 0x3004, 0xFF},	/* enable all clock */
	{MISENSOR_8BIT, 0x3006, 0xC3},	/* enable clocks */
	{MISENSOR_8BIT, 0x300E, 0x45},	/* MIPI enable, 2lane mode */
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4713, 0x02},	/* jepg mode select. JPEG mode 2 */
	{MISENSOR_8BIT, 0x4407, 0x0C},	/* jpeg ctrl */
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x37},	/* debug mode */
	{MISENSOR_8BIT, 0x460C, 0x20},	/* VFIFO ctrl */
	{MISENSOR_8BIT, 0x3824, 0x01},	/* VFIFO */
	{MISENSOR_8BIT, 0x5001, 0x83},	/* isp ctrl */
	{MISENSOR_8BIT, 0x4005, 0x1A},	/* BLC ctrl */
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x11},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x01},
	{MISENSOR_8BIT, 0x460C, 0x20},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x0B},
	{MISENSOR_8BIT, 0x380D, 0x1C},	/* total H-size is 2844 */
	{MISENSOR_8BIT, 0x380E, 0x07},
	{MISENSOR_8BIT, 0x380F, 0x95},	/* total v-size is 1941 */
	{MISENSOR_8BIT, 0x3A02, 0x07},
	{MISENSOR_8BIT, 0x3A03, 0x91},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x07},
	{MISENSOR_8BIT, 0x3A15, 0x91},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x24},
	{MISENSOR_8BIT, 0x3A0A, 0x00},
	{MISENSOR_8BIT, 0x3A0B, 0xF3},
	{MISENSOR_8BIT, 0x3A0E, 0x06},
	{MISENSOR_8BIT, 0x3A0D, 0x07},
	{MISENSOR_8BIT, 0x4837, 0x0C},
	{MISENSOR_8BIT, 0x5306, 0x08},
	{MISENSOR_8BIT, 0x5308, 0x00},
	{MISENSOR_TOK_TERM, 0, 0}
};
/* 3M, yuv422, 2lanes, mipi, 15fps */
static struct misensor_reg const ov5645_3M_init[] = {
        {MISENSOR_8BIT, 0x5302, 0x28},                   		
        {MISENSOR_8BIT, 0x5303, 0x18},                   		
        {MISENSOR_8BIT, 0x5306, 0x08},                   		
        {MISENSOR_8BIT, 0x5307, 0x18},                   		
        {MISENSOR_8BIT, 0x3618, 0x04},                   		
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x11},
        {MISENSOR_8BIT, 0x3036, 0x68},
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3824, 0x01},
        {MISENSOR_8BIT, 0x460C, 0x20},
        {MISENSOR_8BIT, 0x300E, 0x45},
        {MISENSOR_8BIT, 0x3600, 0x08},                   		
        {MISENSOR_8BIT, 0x3601, 0x33},                   		
        {MISENSOR_8BIT, 0x3708, 0x63},                   		
        {MISENSOR_8BIT, 0x370c, 0xc0},
        {MISENSOR_8BIT, 0x3800, 0x00}, 
        {MISENSOR_8BIT, 0x3801, 0x00}, 
        {MISENSOR_8BIT, 0x3802, 0x00},                   		
        {MISENSOR_8BIT, 0x3803, 0x00},
        {MISENSOR_8BIT, 0x3804, 0x0a},
        {MISENSOR_8BIT, 0x3805, 0x3f},
        {MISENSOR_8BIT, 0x3806, 0x07},
        {MISENSOR_8BIT, 0x3807, 0x9f},
        {MISENSOR_8BIT, 0x3808, 0x08},
        {MISENSOR_8BIT, 0x3809, 0x00},
        {MISENSOR_8BIT, 0x380a, 0x06},
        {MISENSOR_8BIT, 0x380b, 0x00},
        {MISENSOR_8BIT, 0x380c, 0x0b},
        {MISENSOR_8BIT, 0x380d, 0x1c},
        {MISENSOR_8BIT, 0x380e, 0x07},
        {MISENSOR_8BIT, 0x380f, 0xb0},
        {MISENSOR_8BIT, 0x3813, 0x06},
        {MISENSOR_8BIT, 0x3814, 0x11},
        {MISENSOR_8BIT, 0x3815, 0x11},
        {MISENSOR_8BIT, 0x3820, 0x40},
        {MISENSOR_8BIT, 0x3821, 0x06},
        //{MISENSOR_8BIT, 0x4514, 0x88},
        {MISENSOR_8BIT, 0x3a02, 0x03},
        {MISENSOR_8BIT, 0x3a03, 0xb0},
        {MISENSOR_8BIT, 0x3a08, 0x01},
        {MISENSOR_8BIT, 0x3a09, 0x27},
        {MISENSOR_8BIT, 0x3a0a, 0x00},
        {MISENSOR_8BIT, 0x3a0b, 0xf6},
        {MISENSOR_8BIT, 0x3a0e, 0x06},
        {MISENSOR_8BIT, 0x3a0d, 0x08},
        {MISENSOR_8BIT, 0x3a14, 0x03},
        {MISENSOR_8BIT, 0x3a15, 0xb0},
        {MISENSOR_8BIT, 0x3a18, 0x00},
        {MISENSOR_8BIT, 0x3a19, 0x50},
        {MISENSOR_8BIT, 0x4004, 0x06},
        {MISENSOR_8BIT, 0x4005, 0x1a},
        {MISENSOR_8BIT, 0x4837, 0x0b},
        {MISENSOR_8BIT, 0x3503, 0x03},
       // {MISENSOR_8BIT, 0x3406, 0x01},
       // {MISENSOR_8BIT, 0x5583, 0x40},	/* sat U */
       // {MISENSOR_8BIT, 0x5584, 0x30},	/* sat V */
       // {MISENSOR_8BIT, 0x5589, 0x28},
       // {MISENSOR_8BIT, 0x558b, 0x4c},
        {MISENSOR_TOK_TERM, 0, 0}
};
/* D3M, yuv422, 2lanes, mipi, 15fps */
static struct misensor_reg const ov5645_D3M_init[] = {
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3820, 0x46},
	{MISENSOR_8BIT, 0x3821, 0x00},
	{MISENSOR_8BIT, 0x3814, 0x11},
	{MISENSOR_8BIT, 0x3815, 0x11},
	{MISENSOR_8BIT, 0x3800, 0x00},
	{MISENSOR_8BIT, 0x3801, 0x00},	/* X start of input size. value is 0 */
	{MISENSOR_8BIT, 0x3802, 0x00},
	{MISENSOR_8BIT, 0x3803, 0x00},	/* Y start of input size. value is 0 */
	{MISENSOR_8BIT, 0x3804, 0x09},
	{MISENSOR_8BIT, 0x3805, 0xDF},	/* X end of input size. value is 2527 */
	{MISENSOR_8BIT, 0x3806, 0x06},
	{MISENSOR_8BIT, 0x3807, 0x87},	/* Y end of input size. value is 1671 */
	{MISENSOR_8BIT, 0x3808, 0x08},
	{MISENSOR_8BIT, 0x3809, 0x40},	/* DVP output H_width, value is 2112 */
	{MISENSOR_8BIT, 0x380A, 0x05},
	{MISENSOR_8BIT, 0x380B, 0x80},	/* DVP output V_heigh, value is 1408 */
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x10},	/* X offset of pre-scaling */
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x04},	/* Y offset of pre-scaling */
	{MISENSOR_8BIT, 0x3618, 0x04},
	{MISENSOR_8BIT, 0x3612, 0x2B},
	{MISENSOR_8BIT, 0x3708, 0x64},
	{MISENSOR_8BIT, 0x3709, 0x12},
	{MISENSOR_8BIT, 0x370C, 0x00},
	{MISENSOR_8BIT, 0x3A02, 0x07},
	{MISENSOR_8BIT, 0x3A03, 0xB0},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x24},	/* 50HZ band steps */
	{MISENSOR_8BIT, 0x3A0A, 0x00},
	{MISENSOR_8BIT, 0x3A0B, 0xF3},	/* 60HZ band steps */
	{MISENSOR_8BIT, 0x3A0E, 0x08},	/* 50HZ max band in one frame */
	{MISENSOR_8BIT, 0x3A0D, 0x09},	/* 60HZ max band in one frame */
	{MISENSOR_8BIT, 0x3A14, 0x07},
	{MISENSOR_8BIT, 0x3A15, 0xB0},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x4001, 0x02},	/* BLC start line */
	{MISENSOR_8BIT, 0x4004, 0x06},	/* BLC line number */
	{MISENSOR_8BIT, 0x3000, 0x00},	/* system reset */
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x00},	/* system reset */
	{MISENSOR_8BIT, 0x3004, 0xFF},	/* enable all clock */
	{MISENSOR_8BIT, 0x3006, 0xC3},	/* enable clocks */
	{MISENSOR_8BIT, 0x300E, 0x45},	/* MIPI enable, 2lane mode */
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4713, 0x02},	/* jepg mode select. JPEG mode 2 */
	{MISENSOR_8BIT, 0x4407, 0x0C},	/* jpeg ctrl */
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x37},	/* debug mode */
	{MISENSOR_8BIT, 0x460C, 0x20},	/* VFIFO ctrl */
	{MISENSOR_8BIT, 0x3824, 0x01},	/* VFIFO */
	{MISENSOR_8BIT, 0x5001, 0xA3},	/* isp ctrl, enable downscaling */
	{MISENSOR_8BIT, 0x4005, 0x1A},	/* BLC ctrl */
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x11},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x01},
	{MISENSOR_8BIT, 0x460C, 0x20},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x0B},
	{MISENSOR_8BIT, 0x380D, 0x1C},	/* total H-size is 2844 */
	{MISENSOR_8BIT, 0x380E, 0x07},
	{MISENSOR_8BIT, 0x380F, 0x95},	/* total v-size is 1941 */
	{MISENSOR_8BIT, 0x3A02, 0x07},
	{MISENSOR_8BIT, 0x3A03, 0x91},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x07},
	{MISENSOR_8BIT, 0x3A15, 0x91},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x24},
	{MISENSOR_8BIT, 0x3A0A, 0x00},
	{MISENSOR_8BIT, 0x3A0B, 0xF3},
	{MISENSOR_8BIT, 0x3A0E, 0x06},
	{MISENSOR_8BIT, 0x3A0D, 0x07},
	{MISENSOR_8BIT, 0x4837, 0x0C},
	{MISENSOR_8BIT, 0x5306, 0x08},
	{MISENSOR_8BIT, 0x5308, 0x00},
	{MISENSOR_TOK_TERM, 0, 0}
};

/* camera: 1088p, yuv422, 2lanes, mipi, 30fps */
static struct misensor_reg const ov5645_1088p_init[] = {
	{MISENSOR_8BIT, 0x3017, 0x00},
	{MISENSOR_8BIT, 0x3018, 0x00},
	{MISENSOR_8BIT, 0x3C04, 0x28},
	{MISENSOR_8BIT, 0x3C05, 0x98},
	{MISENSOR_8BIT, 0x3C06, 0x00},
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3C08, 0x00},
	{MISENSOR_8BIT, 0x3C09, 0x1C},
	{MISENSOR_8BIT, 0x3C0A, 0x9C},
	{MISENSOR_8BIT, 0x3C0B, 0x40},
	{MISENSOR_8BIT, 0x3820, 0x47},
	{MISENSOR_8BIT, 0x3821, 0x00}, /* disable binning */
	{MISENSOR_8BIT, 0x3814, 0x11},
	{MISENSOR_8BIT, 0x3815, 0x11},
	{MISENSOR_8BIT, 0x3800, 0x01},
	{MISENSOR_8BIT, 0x3801, 0x50},
	{MISENSOR_8BIT, 0x3802, 0x01},
	{MISENSOR_8BIT, 0x3803, 0xB2},
	{MISENSOR_8BIT, 0x3804, 0x08},
	{MISENSOR_8BIT, 0x3805, 0xEF},	/* X end of isp input size */
	{MISENSOR_8BIT, 0x3806, 0x05},
	{MISENSOR_8BIT, 0x3807, 0xF9},	/* Y end of isp input size */
	{MISENSOR_8BIT, 0x3808, 0x07},
	{MISENSOR_8BIT, 0x3809, 0x80},	/* 1920 */
	{MISENSOR_8BIT, 0x380A, 0x04},
	{MISENSOR_8BIT, 0x380B, 0x40},	/* 1088 */
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x10},
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x04},
	{MISENSOR_8BIT, 0x3618, 0x04},
	{MISENSOR_8BIT, 0x3612, 0x2B},
	{MISENSOR_8BIT, 0x3708, 0x62},
	{MISENSOR_8BIT, 0x3709, 0x12},
	{MISENSOR_8BIT, 0x370C, 0x00},
	{MISENSOR_8BIT, 0x3A02, 0x04},
	{MISENSOR_8BIT, 0x3A03, 0x60},
	{MISENSOR_8BIT, 0x3A14, 0x04},
	{MISENSOR_8BIT, 0x3A15, 0x60},
	{MISENSOR_8BIT, 0x4001, 0x02},
	{MISENSOR_8BIT, 0x4004, 0x06},
	{MISENSOR_8BIT, 0x4005, 0x1A}, /* BLC always update */
	{MISENSOR_8BIT, 0x3000, 0x00},
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x1C},
	{MISENSOR_8BIT, 0x3004, 0xFF},
	{MISENSOR_8BIT, 0x3006, 0xC3},
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4300, 0x32},
	{MISENSOR_8BIT, 0x501F, 0x00},
	{MISENSOR_8BIT, 0x4713, 0x02},
	{MISENSOR_8BIT, 0x4407, 0x04},
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x35},
	{MISENSOR_8BIT, 0x5001, 0x83},
	{MISENSOR_8BIT, 0x5025, 0x00},
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x11},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x02},
	{MISENSOR_8BIT, 0x460C, 0x20},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x09},
	{MISENSOR_8BIT, 0x380D, 0x77},	/* h-size is 2423 */
	{MISENSOR_8BIT, 0x380E, 0x04},
	{MISENSOR_8BIT, 0x380F, 0xCA},	/* v-size is 1226 */
	{MISENSOR_8BIT, 0x3A02, 0x04},
	{MISENSOR_8BIT, 0x3A03, 0xC6},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x04},
	{MISENSOR_8BIT, 0x3A15, 0xC6},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x57},
	{MISENSOR_8BIT, 0x3A0A, 0x01},
	{MISENSOR_8BIT, 0x3A0B, 0x1E},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x04},
	{MISENSOR_8BIT, 0x4837, 0x0C},
	{MISENSOR_8BIT, 0x5306, 0x18},
	{MISENSOR_8BIT, 0x5308, 0x10},
	{MISENSOR_TOK_TERM, 0, 0}
};
/* camera: 1080p, yuv422, 2lanes, mipi, 30fps */
static struct misensor_reg const ov5645_1080p_init[] = {
        {MISENSOR_8BIT, 0x3618, 0x04},
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x11},
        {MISENSOR_8BIT, 0x3036, 0x68},
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3824, 0x02},
        {MISENSOR_8BIT, 0x460C, 0x20},
        {MISENSOR_8BIT, 0x300E, 0x45},
        {MISENSOR_8BIT, 0x3600, 0x08},
        {MISENSOR_8BIT, 0x3601, 0x33},
        {MISENSOR_8BIT, 0x3708, 0x63},
        {MISENSOR_8BIT, 0x370c, 0xC0},
        {MISENSOR_8BIT, 0x3800, 0x01},
        {MISENSOR_8BIT, 0x3801, 0x50},
        {MISENSOR_8BIT, 0x3802, 0x01},
        {MISENSOR_8BIT, 0x3803, 0xb2},
        {MISENSOR_8BIT, 0x3804, 0x08},
        {MISENSOR_8BIT, 0x3805, 0xef},
        {MISENSOR_8BIT, 0x3806, 0x05},
        {MISENSOR_8BIT, 0x3807, 0xf1},
        {MISENSOR_8BIT, 0x3808, 0x07},
        {MISENSOR_8BIT, 0x3809, 0x80},
        {MISENSOR_8BIT, 0x380a, 0x04},
        {MISENSOR_8BIT, 0x380b, 0x38},
        {MISENSOR_8BIT, 0x380c, 0x09},
        {MISENSOR_8BIT, 0x380d, 0xc4},
        {MISENSOR_8BIT, 0x380e, 0x04},
        {MISENSOR_8BIT, 0x380f, 0x60},
        {MISENSOR_8BIT, 0x3813, 0x04},
        {MISENSOR_8BIT, 0x3814, 0x11},
        {MISENSOR_8BIT, 0x3815, 0x11},
        {MISENSOR_8BIT, 0x3820, 0x46},
        {MISENSOR_8BIT, 0x3821, 0x00},
        {MISENSOR_8BIT, 0x3a02, 0x04},
        {MISENSOR_8BIT, 0x3a03, 0x60},
        {MISENSOR_8BIT, 0x3a08, 0x01},
        {MISENSOR_8BIT, 0x3a09, 0x50},
        {MISENSOR_8BIT, 0x3a0a, 0x01},
        {MISENSOR_8BIT, 0x3a0b, 0x18},
        {MISENSOR_8BIT, 0x3a0e, 0x03},
        {MISENSOR_8BIT, 0x3a0d, 0x04},
        {MISENSOR_8BIT, 0x3a14, 0x04},
        {MISENSOR_8BIT, 0x3a15, 0x60},
        {MISENSOR_8BIT, 0x3a18, 0x00},
        {MISENSOR_8BIT, 0x3a19, 0xe0}, //f0
        {MISENSOR_8BIT, 0x3a0f, 0x48},
        {MISENSOR_8BIT, 0x3a10, 0x38},
        {MISENSOR_8BIT, 0x3a11, 0x70},
        {MISENSOR_8BIT, 0x3a1b, 0x48},
        {MISENSOR_8BIT, 0x3a1e, 0x38},
        {MISENSOR_8BIT, 0x3a1f, 0x28},
        {MISENSOR_8BIT, 0x4004, 0x06},
        {MISENSOR_8BIT, 0x4005, 0x18},
        {MISENSOR_8BIT, 0x4837, 0x0b},
        {MISENSOR_8BIT, 0x3503, 0x00},
       // {MISENSOR_8BIT, 0x3406, 0x00},
        {MISENSOR_8BIT, 0x5306, 0x20},
        {MISENSOR_8BIT, 0x5583, 0x40},	/* sat U */
        {MISENSOR_8BIT, 0x5584, 0x30},	/* sat V */
        {MISENSOR_8BIT, 0x5589, 0x40},
        {MISENSOR_8BIT, 0x558b, 0x78},
        {MISENSOR_TOK_TERM, 0, 0}
};
/* camera: 720p, yuv422, 2lanes, mipi, 30fps */
static struct misensor_reg const ov5645_720p_init[] = {	
        {MISENSOR_8BIT, 0x3618, 0x00},
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x11},
        {MISENSOR_8BIT, 0x3036, 0x68},	/* same with 1080p */
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3824, 0x01},
        {MISENSOR_8BIT, 0x460C, 0x20},
        {MISENSOR_8BIT, 0x300E, 0x45},
        {MISENSOR_8BIT, 0x3600, 0x09},
        {MISENSOR_8BIT, 0x3601, 0x43},
        {MISENSOR_8BIT, 0x3708, 0x66},
        {MISENSOR_8BIT, 0x370c, 0xC3},
        {MISENSOR_8BIT, 0x3800, 0x00},
        {MISENSOR_8BIT, 0x3801, 0x00},
        {MISENSOR_8BIT, 0x3802, 0x00},
        {MISENSOR_8BIT, 0x3803, 0xfa},
        {MISENSOR_8BIT, 0x3804, 0x0a},
        {MISENSOR_8BIT, 0x3805, 0x3f},
        {MISENSOR_8BIT, 0x3806, 0x06},
        {MISENSOR_8BIT, 0x3807, 0xa9},
        {MISENSOR_8BIT, 0x3808, 0x05},
        {MISENSOR_8BIT, 0x3809, 0x00},
        {MISENSOR_8BIT, 0x380a, 0x02},
        {MISENSOR_8BIT, 0x380b, 0xd0},
        {MISENSOR_8BIT, 0x380c, 0x09},
        {MISENSOR_8BIT, 0x380d, 0x00},
        {MISENSOR_8BIT, 0x380e, 0x02},
        {MISENSOR_8BIT, 0x380f, 0xf0},
        {MISENSOR_8BIT, 0x3813, 0x04},
        {MISENSOR_8BIT, 0x3814, 0x31},
        {MISENSOR_8BIT, 0x3815, 0x31},
        {MISENSOR_8BIT, 0x3820, 0x47},
        {MISENSOR_8BIT, 0x3821, 0x01},
        {MISENSOR_8BIT, 0x3a02, 0x02},
        {MISENSOR_8BIT, 0x3a03, 0xe4},
        {MISENSOR_8BIT, 0x3a08, 0x01},
        {MISENSOR_8BIT, 0x3a09, 0xbc},
        {MISENSOR_8BIT, 0x3a0a, 0x01},
        {MISENSOR_8BIT, 0x3a0b, 0x72},
        {MISENSOR_8BIT, 0x3a0e, 0x01},
        {MISENSOR_8BIT, 0x3a0d, 0x02},
        {MISENSOR_8BIT, 0x3a14, 0x02},
        {MISENSOR_8BIT, 0x3a15, 0xe4},
        {MISENSOR_8BIT, 0x3a18, 0x00},
        {MISENSOR_8BIT, 0x3a19, 0xe0},
        {MISENSOR_8BIT, 0x3a0f, 0x48},
        {MISENSOR_8BIT, 0x3a10, 0x38},
        {MISENSOR_8BIT, 0x3a11, 0x70},
        {MISENSOR_8BIT, 0x3a1b, 0x48},
        {MISENSOR_8BIT, 0x3a1e, 0x38},
        {MISENSOR_8BIT, 0x3a1f, 0x28},
        {MISENSOR_8BIT, 0x4004, 0x02},
        {MISENSOR_8BIT, 0x4005, 0x18},
        {MISENSOR_8BIT, 0x4837, 0x0b},
        {MISENSOR_8BIT, 0x3503, 0x00},
       // {MISENSOR_8BIT, 0x3406, 0x00},
        {MISENSOR_8BIT, 0x5306, 0x20},
        {MISENSOR_8BIT, 0x5583, 0x40},	/* sat U */
        {MISENSOR_8BIT, 0x5584, 0x30},	/* sat V */
        {MISENSOR_8BIT, 0x5589, 0x40},
        {MISENSOR_8BIT, 0x558b, 0x78},
        {MISENSOR_TOK_TERM, 0, 0}
};

/* camera: 480p, yuv422, 2lanes, mipi, 30fps */
static struct misensor_reg const ov5645_480p_init[] = {

        {MISENSOR_8BIT, 0x3618, 0x00},         
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x11},
        {MISENSOR_8BIT, 0x3036, 0x68},	/* same with 720p */
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3824, 0x01},
        {MISENSOR_8BIT, 0x460C, 0x20},
        {MISENSOR_8BIT, 0x300E, 0x45},
        {MISENSOR_8BIT, 0x3600, 0x09},         
        {MISENSOR_8BIT, 0x3601, 0x43},         
        {MISENSOR_8BIT, 0x3708, 0x66},         
        {MISENSOR_8BIT, 0x370c, 0xc3},         
        {MISENSOR_8BIT, 0x3800, 0x00},         
        {MISENSOR_8BIT, 0x3801, 0x00},         
        {MISENSOR_8BIT, 0x3802, 0x00},         
        {MISENSOR_8BIT, 0x3803, 0x06},         
        {MISENSOR_8BIT, 0x3804, 0x0a},         
        {MISENSOR_8BIT, 0x3805, 0x3f},         
        {MISENSOR_8BIT, 0x3806, 0x06},         
        {MISENSOR_8BIT, 0x3807, 0xec},         
        {MISENSOR_8BIT, 0x3808, 0x02},        
        {MISENSOR_8BIT, 0x3809, 0xd0},        
        {MISENSOR_8BIT, 0x380a, 0x01},        
        {MISENSOR_8BIT, 0x380b, 0xe0},     
        {MISENSOR_8BIT, 0x380c, 0x08},         
        {MISENSOR_8BIT, 0x380d, 0x00},        
        {MISENSOR_8BIT, 0x380e, 0x04},         
        {MISENSOR_8BIT, 0x380f, 0x10},        
        {MISENSOR_8BIT, 0x3813, 0x06},		   
        {MISENSOR_8BIT, 0x3814, 0x31},         
        {MISENSOR_8BIT, 0x3815, 0x31},         
        {MISENSOR_8BIT, 0x3820, 0x43},         
        {MISENSOR_8BIT, 0x3821, 0x01},  
        {MISENSOR_8BIT, 0x4514, 0x00},
        {MISENSOR_8BIT, 0x3a02, 0x03},         
        {MISENSOR_8BIT, 0x3a03, 0xab},        
        {MISENSOR_8BIT, 0x3a08, 0x01},       
        {MISENSOR_8BIT, 0x3a09, 0x39},        
        {MISENSOR_8BIT, 0x3a0a, 0x01},         
        {MISENSOR_8BIT, 0x3a0b, 0x04},        
        {MISENSOR_8BIT, 0x3a0e, 0x03},        
        {MISENSOR_8BIT, 0x3a0d, 0x04},       
        {MISENSOR_8BIT, 0x3a14, 0x03},         
        {MISENSOR_8BIT, 0x3a15, 0xab},       
        {MISENSOR_8BIT, 0x3a18, 0x00},       
        {MISENSOR_8BIT, 0x3a19, 0xf8},           
        {MISENSOR_8BIT, 0x4004, 0x02},         
        {MISENSOR_8BIT, 0x4005, 0x18},         
        {MISENSOR_8BIT, 0x4837, 0x10},         
        {MISENSOR_8BIT, 0x3503, 0x00},
        //{MISENSOR_8BIT, 0x3406, 0x00},
        {MISENSOR_8BIT, 0x5589, 0x40},
        {MISENSOR_8BIT, 0x558b, 0x78},
        {MISENSOR_TOK_TERM, 0, 0}
};

/* camera: 320p, yuv422, 2lanes, mipi, 30fps */
static struct misensor_reg const ov5645_320p_init[] = {
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3820, 0x41},
	{MISENSOR_8BIT, 0x3821, 0x07},	/* enable binning */
	{MISENSOR_8BIT, 0x3814, 0x31},
	{MISENSOR_8BIT, 0x3815, 0x31},	/* 2X2 binning */
	{MISENSOR_8BIT, 0x3800, 0x00},
	{MISENSOR_8BIT, 0x3801, 0x00},
	{MISENSOR_8BIT, 0x3802, 0x00},
	{MISENSOR_8BIT, 0x3803, 0x00},
	{MISENSOR_8BIT, 0x3804, 0x09},
	{MISENSOR_8BIT, 0x3805, 0xDF},
	{MISENSOR_8BIT, 0x3806, 0x06},
	{MISENSOR_8BIT, 0x3807, 0x87},
	{MISENSOR_8BIT, 0x3808, 0x01},
	{MISENSOR_8BIT, 0x3809, 0xE0},
	{MISENSOR_8BIT, 0x380A, 0x01},
	{MISENSOR_8BIT, 0x380B, 0x40},
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x0B},
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x04},
	{MISENSOR_8BIT, 0x3618, 0x00},
	{MISENSOR_8BIT, 0x3612, 0x29},
	{MISENSOR_8BIT, 0x3708, 0x64},
	{MISENSOR_8BIT, 0x3709, 0x52},
	{MISENSOR_8BIT, 0x370C, 0x03},
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0xB6},
	{MISENSOR_8BIT, 0x3A0A, 0x01},
	{MISENSOR_8BIT, 0x3A0B, 0x6D},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x03},
	{MISENSOR_8BIT, 0x4001, 0x02},
	{MISENSOR_8BIT, 0x4004, 0x02},
	{MISENSOR_8BIT, 0x3000, 0x00},
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x1C},
	{MISENSOR_8BIT, 0x3004, 0xFF},
	{MISENSOR_8BIT, 0x3006, 0xC3},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4713, 0x03},
	{MISENSOR_8BIT, 0x4407, 0x04},
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x35},
	{MISENSOR_8BIT, 0x3824, 0x02},
	{MISENSOR_8BIT, 0x5001, 0xA3},	/* enable scaling */
	{MISENSOR_8BIT, 0x4005, 0x18},
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x14},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x04},
	{MISENSOR_8BIT, 0x460C, 0x22},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x07},
	{MISENSOR_8BIT, 0x380D, 0x68},	/* total h_size is 1896 */
	{MISENSOR_8BIT, 0x380E, 0x05},
	{MISENSOR_8BIT, 0x380F, 0xB0},	/* total V-size is 1456 */
	{MISENSOR_8BIT, 0x3A02, 0x05},
	{MISENSOR_8BIT, 0x3A03, 0xAC},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x05},
	{MISENSOR_8BIT, 0x3A15, 0xAC},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0xB6},
	{MISENSOR_8BIT, 0x3A0A, 0x01},
	{MISENSOR_8BIT, 0x3A0B, 0x6D},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x03},
	{MISENSOR_8BIT, 0x4837, 0x30},
	{MISENSOR_8BIT, 0x5306, 0x08},
	{MISENSOR_8BIT, 0x5308, 0x00},
	{MISENSOR_TOK_TERM, 0, 0}
};
/* camera: 360p, yuv422, 2lanes, mipi, 30fps */
static struct misensor_reg const ov5645_360p_init[] = {
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3820, 0x40},
	{MISENSOR_8BIT, 0x3821, 0x06},
	{MISENSOR_8BIT, 0x3814, 0x11},
	{MISENSOR_8BIT, 0x3815, 0x11},
	{MISENSOR_8BIT, 0x3800, 0x01},
	{MISENSOR_8BIT, 0x3801, 0x50},	/* X start of input size */
	{MISENSOR_8BIT, 0x3802, 0x01},
	{MISENSOR_8BIT, 0x3803, 0xB2},	/* Y start of input size */
	{MISENSOR_8BIT, 0x3804, 0x08},
	{MISENSOR_8BIT, 0x3805, 0xEF},	/* X end of input size */
	{MISENSOR_8BIT, 0x3806, 0x05},
	{MISENSOR_8BIT, 0x3807, 0xF2},	/* Y end of input size */
	{MISENSOR_8BIT, 0x3808, 0x02},
	{MISENSOR_8BIT, 0x3809, 0x80},	/* DVP output H_width */
	{MISENSOR_8BIT, 0x380A, 0x01},
	{MISENSOR_8BIT, 0x380B, 0x68},	/* DVP output V_heigh */
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x10},	/* X offset of pre-scaling */
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x04},	/* Y offset of pre-scaling */
	{MISENSOR_8BIT, 0x3618, 0x04},
	{MISENSOR_8BIT, 0x3612, 0x2B},
	{MISENSOR_8BIT, 0x3708, 0x64},
	{MISENSOR_8BIT, 0x3709, 0x12},
	{MISENSOR_8BIT, 0x370C, 0x00},
	{MISENSOR_8BIT, 0x4001, 0x02},	/* BLC start line */
	{MISENSOR_8BIT, 0x4004, 0x02},	/* BLC line number */
	{MISENSOR_8BIT, 0x3000, 0x00},	/* system reset */
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x00},	/* system reset */
	{MISENSOR_8BIT, 0x3004, 0xFF},	/* enable all clock */
	{MISENSOR_8BIT, 0x3006, 0xC3},	/* enable clocks */
	{MISENSOR_8BIT, 0x300E, 0x45},	/* MIPI enable, 2lane mode */
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4713, 0x02},	/* jepg mode select. JPEG mode 2 */
	{MISENSOR_8BIT, 0x4407, 0x0C},	/* jpeg ctrl */
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x37},	/* debug mode */
	{MISENSOR_8BIT, 0x460C, 0x20},	/* VFIFO ctrl */
	{MISENSOR_8BIT, 0x4837, 0x2C},	/* PCLK PERIOD */
	{MISENSOR_8BIT, 0x3824, 0x01},	/* VFIFO */
	{MISENSOR_8BIT, 0x5001, 0xA3},	/* isp ctrl, enable downscaling */
	{MISENSOR_8BIT, 0x4005, 0x18},	/* BLC ctrl */
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x11},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x01},
	{MISENSOR_8BIT, 0x460C, 0x20},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x09},
	{MISENSOR_8BIT, 0x380D, 0x05},	/* total H-size is 2309 */
	{MISENSOR_8BIT, 0x380E, 0x04},
	{MISENSOR_8BIT, 0x380F, 0xB0},	/* total v-size is 1200*/
	{MISENSOR_8BIT, 0x3A02, 0x04},
	{MISENSOR_8BIT, 0x3A03, 0xAC},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x04},
	{MISENSOR_8BIT, 0x3A15, 0xAC},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x68},
	{MISENSOR_8BIT, 0x3A0A, 0x01},
	{MISENSOR_8BIT, 0x3A0B, 0x2C},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x04},
	{MISENSOR_8BIT, 0x4837, 0x0C},
	{MISENSOR_8BIT, 0x5306, 0x18},
	{MISENSOR_8BIT, 0x5308, 0x10},
	{MISENSOR_TOK_TERM, 0, 0}
};
/* camera vga 30fps, yuv, 2lanes */
static struct misensor_reg const ov5645_vga_init[] = {		
        {MISENSOR_8BIT, 0x3618, 0x00},
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x14},
        {MISENSOR_8BIT, 0x3036, 0x68},
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3824, 0x04},
        {MISENSOR_8BIT, 0x460C, 0x20},
        {MISENSOR_8BIT, 0x300E, 0x45},
        {MISENSOR_8BIT, 0x3600, 0x09},
        {MISENSOR_8BIT, 0x3601, 0x43},
        {MISENSOR_8BIT, 0x3708, 0x66},
        {MISENSOR_8BIT, 0x370c, 0xc3},
        {MISENSOR_8BIT, 0x3800, 0x00}, 
        {MISENSOR_8BIT, 0x3801, 0x00}, 
        {MISENSOR_8BIT, 0x3802, 0x00}, 
        {MISENSOR_8BIT, 0x3803, 0x04},
        {MISENSOR_8BIT, 0x3804, 0x0a},
        {MISENSOR_8BIT, 0x3805, 0x3f},
        {MISENSOR_8BIT, 0x3806, 0x07},
        {MISENSOR_8BIT, 0x3807, 0x9b},
        {MISENSOR_8BIT, 0x3808, 0x02},
        {MISENSOR_8BIT, 0x3809, 0x80},
        {MISENSOR_8BIT, 0x380a, 0x01},
        {MISENSOR_8BIT, 0x380b, 0xe0},
        {MISENSOR_8BIT, 0x380c, 0x09},
        {MISENSOR_8BIT, 0x380d, 0x00},
        {MISENSOR_8BIT, 0x380e, 0x05},
        {MISENSOR_8BIT, 0x380f, 0x10},
        {MISENSOR_8BIT, 0x3813, 0x06},
        {MISENSOR_8BIT, 0x3814, 0x31},
        {MISENSOR_8BIT, 0x3815, 0x31},
        {MISENSOR_8BIT, 0x3820, 0x41},
        {MISENSOR_8BIT, 0x3821, 0x07},
        //{MISENSOR_8BIT, 0x3a02, 0x05},
        //{MISENSOR_8BIT, 0x3a03, 0x60},
        {MISENSOR_8BIT, 0x3a08, 0x01},
        {MISENSOR_8BIT, 0x3a09, 0x27},
        {MISENSOR_8BIT, 0x3a0a, 0x00},
        {MISENSOR_8BIT, 0x3a0b, 0xf6},
        {MISENSOR_8BIT, 0x3a0e, 0x03},
        {MISENSOR_8BIT, 0x3a0d, 0x04},
        {MISENSOR_8BIT, 0x3a00, 0x3c},
        {MISENSOR_8BIT, 0x3a02, 0x0a},
        {MISENSOR_8BIT, 0x3a03, 0x20},
        {MISENSOR_8BIT, 0x3a14, 0x0a},
        {MISENSOR_8BIT, 0x3a15, 0x20},
        {MISENSOR_8BIT, 0x3a17, 0x2},
        {MISENSOR_8BIT, 0x3a18, 0x00},
        {MISENSOR_8BIT, 0x3a19, 0xf8},
        {MISENSOR_8BIT, 0x4004, 0x02},
        {MISENSOR_8BIT, 0x4005, 0x18},
        {MISENSOR_8BIT, 0x4837, 0x20},
        {MISENSOR_8BIT, 0x3503, 0x00},
        {MISENSOR_8BIT, 0x3406, 0x00},
        {MISENSOR_8BIT, 0x3023, 0x01},
        {MISENSOR_8BIT, 0x3022, 0x04},
        {MISENSOR_TOK_TERM, 0, 0}
};

/* camera qvga 30fps, yuv, 2lanes */
static struct misensor_reg const ov5645_qvga_init[] = {
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3820, 0x41},
	{MISENSOR_8BIT, 0x3821, 0x07},	/* enable binning */
	{MISENSOR_8BIT, 0x3814, 0x31},
	{MISENSOR_8BIT, 0x3815, 0x31},	/* 2X2 binning */
	{MISENSOR_8BIT, 0x3800, 0x00},
	{MISENSOR_8BIT, 0x3801, 0x00},
	{MISENSOR_8BIT, 0x3802, 0x00},
	{MISENSOR_8BIT, 0x3803, 0x00},
	{MISENSOR_8BIT, 0x3804, 0x0A},
	{MISENSOR_8BIT, 0x3805, 0x1F},
	{MISENSOR_8BIT, 0x3806, 0x07},
	{MISENSOR_8BIT, 0x3807, 0x87},
	{MISENSOR_8BIT, 0x3808, 0x01},
	{MISENSOR_8BIT, 0x3809, 0x40},
	{MISENSOR_8BIT, 0x380A, 0x00},
	{MISENSOR_8BIT, 0x380B, 0xF0},
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x08},
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x02},
	{MISENSOR_8BIT, 0x3618, 0x00},
	{MISENSOR_8BIT, 0x3612, 0x29},
	{MISENSOR_8BIT, 0x3708, 0x64},
	{MISENSOR_8BIT, 0x3709, 0x52},
	{MISENSOR_8BIT, 0x370C, 0x03},
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x27},
	{MISENSOR_8BIT, 0x3A0A, 0x00},
	{MISENSOR_8BIT, 0x3A0B, 0xF6},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x04},
	{MISENSOR_8BIT, 0x4001, 0x02},
	{MISENSOR_8BIT, 0x4004, 0x02},
	{MISENSOR_8BIT, 0x3000, 0x00},
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x1C},
	{MISENSOR_8BIT, 0x3004, 0xFF},
	{MISENSOR_8BIT, 0x3006, 0xC3},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4713, 0x03},
	{MISENSOR_8BIT, 0x4407, 0x04},
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x35},
	{MISENSOR_8BIT, 0x460C, 0x22},
	{MISENSOR_8BIT, 0x3824, 0x02},
	{MISENSOR_8BIT, 0x5001, 0xA3},	/* enable scaling */
	{MISENSOR_8BIT, 0x4005, 0x18},
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x14},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x04},
	{MISENSOR_8BIT, 0x460C, 0x22},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x07},
	{MISENSOR_8BIT, 0x380D, 0x68},	/* total h_size is 1896 */
	{MISENSOR_8BIT, 0x380E, 0x05},
	{MISENSOR_8BIT, 0x380F, 0xB0},	/* total V-size is 1456 */
	{MISENSOR_8BIT, 0x3A02, 0x05},
	{MISENSOR_8BIT, 0x3A03, 0xAC},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x05},
	{MISENSOR_8BIT, 0x3A15, 0xAC},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0xB6},
	{MISENSOR_8BIT, 0x3A0A, 0x01},
	{MISENSOR_8BIT, 0x3A0B, 0x6D},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x03},
	{MISENSOR_8BIT, 0x4837, 0x30},
	{MISENSOR_8BIT, 0x5306, 0x08},
	{MISENSOR_8BIT, 0x5308, 0x00},
	{MISENSOR_TOK_TERM, 0, 0}
};

/* camera dvga 30fps, yuv, 2lanes */
static struct misensor_reg const ov5645_dvga_init[] = {
	{MISENSOR_8BIT, 0x3C07, 0x08},
	{MISENSOR_8BIT, 0x3820, 0x41},
	{MISENSOR_8BIT, 0x3821, 0x07},	/* enable binning */
	{MISENSOR_8BIT, 0x3814, 0x31},
	{MISENSOR_8BIT, 0x3815, 0x31},	/* 2X2 binning */
	{MISENSOR_8BIT, 0x3800, 0x00},
	{MISENSOR_8BIT, 0x3801, 0x00},
	{MISENSOR_8BIT, 0x3802, 0x00},
	{MISENSOR_8BIT, 0x3803, 0x00},
	{MISENSOR_8BIT, 0x3804, 0x0A},
	{MISENSOR_8BIT, 0x3805, 0x1F},
	{MISENSOR_8BIT, 0x3806, 0x07},
	{MISENSOR_8BIT, 0x3807, 0x87},
	{MISENSOR_8BIT, 0x3808, 0x01},
	{MISENSOR_8BIT, 0x3809, 0xA0},	/* DVP output, value is 416 */
	{MISENSOR_8BIT, 0x380A, 0x01},
	{MISENSOR_8BIT, 0x380B, 0x38},	/* DVP output, value is 312 */
	{MISENSOR_8BIT, 0x3810, 0x00},
	{MISENSOR_8BIT, 0x3811, 0x08},
	{MISENSOR_8BIT, 0x3812, 0x00},
	{MISENSOR_8BIT, 0x3813, 0x02},
	{MISENSOR_8BIT, 0x3618, 0x00},
	{MISENSOR_8BIT, 0x3612, 0x29},
	{MISENSOR_8BIT, 0x3708, 0x64},
	{MISENSOR_8BIT, 0x3709, 0x52},
	{MISENSOR_8BIT, 0x370C, 0x03},
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0x27},
	{MISENSOR_8BIT, 0x3A0A, 0x00},
	{MISENSOR_8BIT, 0x3A0B, 0xF6},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x04},
	{MISENSOR_8BIT, 0x4001, 0x02},
	{MISENSOR_8BIT, 0x4004, 0x02},
	{MISENSOR_8BIT, 0x3000, 0x00},
	{MISENSOR_8BIT, 0x3001, 0x08},	/* system reset 1 */
	{MISENSOR_8BIT, 0x3002, 0x1C},
	{MISENSOR_8BIT, 0x3004, 0xFF},
	{MISENSOR_8BIT, 0x3006, 0xC3},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x302E, 0x08},
	{MISENSOR_8BIT, 0x4713, 0x03},
	{MISENSOR_8BIT, 0x4407, 0x04},
	{MISENSOR_8BIT, 0x440E, 0x00},
	{MISENSOR_8BIT, 0x460B, 0x35},
	{MISENSOR_8BIT, 0x460C, 0x22},
	{MISENSOR_8BIT, 0x3824, 0x02},
	{MISENSOR_8BIT, 0x5001, 0xA3},	/* enable scaling */
	{MISENSOR_8BIT, 0x4005, 0x18},
	/* PLL */
	{MISENSOR_8BIT, 0x3034, 0x18},
	{MISENSOR_8BIT, 0x3035, 0x14},
	{MISENSOR_8BIT, 0x3036, 0x68},
	{MISENSOR_8BIT, 0x3037, 0x13},
	{MISENSOR_8BIT, 0x3108, 0x01},
	{MISENSOR_8BIT, 0x3824, 0x04},
	{MISENSOR_8BIT, 0x460C, 0x20},
	{MISENSOR_8BIT, 0x300E, 0x45},
	{MISENSOR_8BIT, 0x303B, 0x14},
	{MISENSOR_8BIT, 0x303C, 0x11},
	{MISENSOR_8BIT, 0x303D, 0x17},
	{MISENSOR_8BIT, 0x380C, 0x07},
	{MISENSOR_8BIT, 0x380D, 0x70},	/* total h_size is 1904 */
	{MISENSOR_8BIT, 0x380E, 0x05},
	{MISENSOR_8BIT, 0x380F, 0xB0},	/* total V-size is 1456 */
	{MISENSOR_8BIT, 0x3A02, 0x05},
	{MISENSOR_8BIT, 0x3A03, 0xAC},	/* 60HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A14, 0x05},
	{MISENSOR_8BIT, 0x3A15, 0xAC},	/* 50HZ max exposure output limit */
	{MISENSOR_8BIT, 0x3A08, 0x01},
	{MISENSOR_8BIT, 0x3A09, 0xB4},
	{MISENSOR_8BIT, 0x3A0A, 0x01},
	{MISENSOR_8BIT, 0x3A0B, 0x6C},
	{MISENSOR_8BIT, 0x3A0E, 0x03},
	{MISENSOR_8BIT, 0x3A0D, 0x04},
	{MISENSOR_8BIT, 0x4837, 0x31},
	{MISENSOR_8BIT, 0x5306, 0x08},
	{MISENSOR_8BIT, 0x5308, 0x00},
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_common[] = {
	 {MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_iq[] = {
	{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_otp_buffer_init[] = {
 {1, 0x3D00, 0},
 {1, 0x3D01, 0},
             {1, 0x3D02, 0},
                 {1, 0x3D03, 0},
                 {1, 0x3D04, 0},
                 {1, 0x3D05, 0},
     {1, 0x3D06, 0},
                 {1, 0x3D07, 0},
     {1, 0x3D08, 0},

             {1, 0x3D09, 0},
             {1, 0x3D0A, 0},
                 {1, 0x3D0B, 0},
                 {1, 0x3D0C, 0},
                 {1, 0x3D0D, 0},
                 {1, 0x3D0E, 0},
                 {1, 0x3D0F, 0},
                 {1, 0x3D10, 0},
                 {1, 0x3D11, 0},
                 {1, 0x3D12, 0},
                 {1, 0x3D13, 0},
                 {1, 0x3D14, 0},
                 {1, 0x3D15, 0},
                 {1, 0x3D16, 0},
                 {1, 0x3D17, 0},
                 {1, 0x3D18, 0},
                 {1, 0x3D19, 0},
                 {1, 0x3D1A, 0},
                 {1, 0x3D1B, 0},
                 {1, 0x3D1C, 0},
                 {1, 0x3D1D, 0},
                 {1, 0x3D1E, 0},
                 {1, 0x3D1F, 0},
                 {0xF000, 0, 0}
};

static struct misensor_reg const booyi_init[] = {
	{1,12547,17},
	{65024,0,5},
	{1,12296,130},
	{65024,0,5},
	{1,12296,66},
	{1,12547,3},
	{1,13571,7},
	{1,12290,28},
	{1,12294,195},
	{1,12302,69},
	{1,12311,64},
	{1,12312,0},
	{1,12334,11},
	{1,12343,19},
	{1,12552,1},
	{1,13841,6},
	{1,13842,11},
	{1,13844,80},
	{1,13848,0},
	{1,12340,24},
	{1,12341,18},
	{1,12342,80},
	{1,13568,0},
	{1,13569,1},
	{1,13570,0},
	{1,13578,0},
	{1,13579,63},
	{1,13824,9},
	{1,13825,67},
	{1,13856,51},
	{1,13857,224},
	{1,13858,1},
	{1,13872,45},
	{1,13873,0},
	{1,13874,50},
	{1,13875,82},
	{1,13876,112},
	{1,13877,19},
	{1,13878,3},
	{1,14082,110},
	{1,14083,82},
	{1,14084,160},
	{1,14085,51},
	{1,14088,102},
	{1,14089,18},
	{1,14091,97},
	{1,14092,195},
	{1,14095,16},
	{1,14101,8},
	{1,14103,1},
	{1,14107,32},
	{1,14129,34},
	{1,14137,112},
	{1,14593,10},
	{1,14597,2},
	{1,14598,16},
	{1,14105,134},
	{1,14336,0},
	{1,14337,0},
	{1,14338,0},
	{1,14339,4},
	{1,14340,10},
	{1,14341,63},
	{1,14342,7},
	{1,14343,155},
	{1,14344,2},
	{1,14345,128},
	{1,14346,1},
	{1,14347,224},
	{1,14348,8},
	{1,14349,0},
	{1,14350,4},
	{1,14351,16},
	{1,14352,0},
	{1,14353,16},
	{1,14354,0},
	{1,14355,6},
	{1,14356,49},
	{1,14357,49},
	{1,14368,65},
	{1,14369,7},
	{1,14372,1},
	{1,14374,3},
	{1,14376,8},
	{1,14850,3},
	{1,14851,171},
	{1,14856,1},
	{1,14857,57},
	{1,14858,1},
	{1,14859,4},
	{1,14862,3},
	{1,14861,4},
	{1,14868,3},
	{1,14869,171},
	{1,14872,0},
	{1,14873,248},
	{1,15361,52},
	{1,15364,40},
	{1,15365,152},
	{1,15367,7},
	{1,15369,194},
	{1,15370,156},
	{1,15371,64},
	{1,15361,196},
	{1,15360,4},
	{1,16385,2},
	{1,16388,2},
	{1,16389,24},
	{1,16464,110},
	{1,16465,143},
	{1,17152,50},
	{1,17684,0},
	{1,17696,176},
	{1,17931,55},
	{1,17932,32},
	{1,18456,1},
	{1,18461,240},
	{1,18463,80},
	{1,18467,112},
	{1,18481,20},
	{1,18487,32},
	{1,18432,36},
	{1,20480,167},
	{1,20481,163},
	{1,20509,0},
	{1,20511,0},
	{1,20541,0},
	{1,20572,48},
	{1,20865,89},
	{1,20867,0},
	{1,20881,240},
	{1,20882,3},
	{1,22148,16},
	{1,22149,160},
	{1,22150,12},
	{1,22151,120},
	{1,23040,8},
	{1,23073,0},
	{1,23076,0},
	{1,12296,2},
	{1,13571,0},
	{1,13312,5},
	{1,13313,66},
	{1,13314,4},
	{1,13315,0},
	{1,13316,7},
	{1,13317,96},
	{1,20864,255},
	{1,20865,243},
	{1,20866,0},
	{1,20867,20},
	{1,20868,37},
	{1,20869,36},
	{1,20870,14},
	{1,20871,16},
	{1,20872,11},
	{1,20873,116},
	{1,20874,84},
	{1,20875,235},
	{1,20876,168},
	{1,20877,54},
	{1,20878,45},
	{1,20879,81},
	{1,20880,64},
	{1,20881,248},
	{1,20882,4},
	{1,20883,112},
	{1,20884,240},
	{1,20885,240},
	{1,20886,3},
	{1,20887,1},
	{1,20888,5},
	{1,20889,229},
	{1,20890,4},
	{1,20891,0},
	{1,20892,4},
	{1,20893,143},
	{1,20894,56},
	{1,21377,30},
	{1,21378,91},
	{1,21379,18},
	{1,21380,5},
	{1,21381,117},
	{1,21382,122},
	{1,21383,126},
	{1,21384,116},
	{1,21385,10},
	{1,21386,1},
	{1,21387,152},
	{1,21248,8},
	{1,21249,48},
	{1,21250,60},
	{1,21251,44},
	{1,21252,8},
	{1,21253,48},
	{1,21254,10},
	{1,21255,26},
	{1,21257,8},
	{1,21258,48},
	{1,21259,4},
	{1,21260,6},
	{1,21632,1},
	{1,21633,6},
	{1,21634,12},
	{1,21635,36},
	{1,21636,74},
	{1,21637,88},
	{1,21638,101},
	{1,21639,114},
	{1,21640,125},
	{1,21641,136},
	{1,21642,146},
	{1,21643,163},
	{1,21644,178},
	{1,21645,200},
	{1,21646,221},
	{1,21647,240},
	{1,21648,21},
	{1,21888,6},
	{1,21891,64},
	{1,21892,16},
	{1,21897,16},
	{1,21898,0},
	{1,21899,248},
	{1,22528,63},
	{1,22529,29},
	{1,22530,25},
	{1,22531,24},
	{1,22532,30},
	{1,22533,63},
	{1,22534,18},
	{1,22535,13},
	{1,22536,9},
	{1,22537,9},
	{1,22538,13},
	{1,22539,17},
	{1,22540,14},
	{1,22541,4},
	{1,22542,1},
	{1,22543,1},
	{1,22544,5},
	{1,22545,13},
	{1,22546,11},
	{1,22547,4},
	{1,22548,0},
	{1,22549,0},
	{1,22550,4},
	{1,22551,11},
	{1,22552,18},
	{1,22553,10},
	{1,22554,6},
	{1,22555,6},
	{1,22556,10},
	{1,22557,16},
	{1,22558,47},
	{1,22559,23},
	{1,22560,19},
	{1,22561,19},
	{1,22562,24},
	{1,22563,51},
	{1,22564,132},
	{1,22565,39},
	{1,22566,41},
	{1,22567,39},
	{1,22568,86},
	{1,22569,71},
	{1,22570,69},
	{1,22571,84},
	{1,22572,85},
	{1,22573,39},
	{1,22574,70},
	{1,22575,98},
	{1,22576,96},
	{1,22577,98},
	{1,22578,38},
	{1,22579,55},
	{1,22580,85},
	{1,22581,99},
	{1,22582,69},
	{1,22583,23},
	{1,22584,86},
	{1,22585,42},
	{1,22586,10},
	{1,22587,24},
	{1,22588,54},
	{1,22589,174},
	{1,20517,0},
	{1,14863,52},
	{1,14864,44},
	{1,14865,104},
	{1,14875,52},
	{1,14878,48},
	{1,14879,20},
	{1,12296,2},
	{61440,0,0},
	{0,0,0}
};

static struct misensor_reg const ov5645_init[] = {
        {MISENSOR_8BIT, 0x3103, 0x11},
        {MISENSOR_TOK_DELAY, 0, 5},
        {MISENSOR_8BIT, 0x3008, 0x82},
        {MISENSOR_TOK_DELAY, 0, 5},
        {MISENSOR_8BIT, 0x3008, 0x42},
        {MISENSOR_8BIT, 0x302c, 0x82},
        {MISENSOR_8BIT, 0x3103, 0x03},
        {MISENSOR_8BIT, 0x3503, 0x07},
        {MISENSOR_8BIT, 0x3002, 0x1c},
        {MISENSOR_8BIT, 0x3006, 0xc3},
        {MISENSOR_8BIT, 0x300e, 0x45},
        {MISENSOR_8BIT, 0x3017, 0x40},
        {MISENSOR_8BIT, 0x3018, 0x00},
        {MISENSOR_8BIT, 0x302e, 0x0b},
        {MISENSOR_8BIT, 0x3037, 0x13},
        {MISENSOR_8BIT, 0x3108, 0x01},
        {MISENSOR_8BIT, 0x3611, 0x06},
        {MISENSOR_8BIT, 0x3612, 0xab},
        {MISENSOR_8BIT, 0x3614, 0x50},
        {MISENSOR_8BIT, 0x3618, 0x00},
        {MISENSOR_8BIT, 0x3034, 0x18},
        {MISENSOR_8BIT, 0x3035, 0x12},
        {MISENSOR_8BIT, 0x3036, 0x50},
        {MISENSOR_8BIT, 0x3500, 0x00},
        {MISENSOR_8BIT, 0x3501, 0x01},
        {MISENSOR_8BIT, 0x3502, 0x00},
        {MISENSOR_8BIT, 0x350a, 0x00},
        {MISENSOR_8BIT, 0x350b, 0x3f},
        {MISENSOR_8BIT, 0x3600, 0x09},
        {MISENSOR_8BIT, 0x3601, 0x43},
        {MISENSOR_8BIT, 0x3620, 0x33},
        {MISENSOR_8BIT, 0x3621, 0xe0},
        {MISENSOR_8BIT, 0x3622, 0x01},
        {MISENSOR_8BIT, 0x3630, 0x2d},
        {MISENSOR_8BIT, 0x3631, 0x00},
        {MISENSOR_8BIT, 0x3632, 0x32},
        {MISENSOR_8BIT, 0x3633, 0x52},
        {MISENSOR_8BIT, 0x3634, 0x70},
        {MISENSOR_8BIT, 0x3635, 0x13},
        {MISENSOR_8BIT, 0x3636, 0x03},
        {MISENSOR_8BIT, 0x3702, 0x6e},
        {MISENSOR_8BIT, 0x3703, 0x52},
        {MISENSOR_8BIT, 0x3704, 0xa0},
        {MISENSOR_8BIT, 0x3705, 0x33},
        {MISENSOR_8BIT, 0x3708, 0x66},
        {MISENSOR_8BIT, 0x3709, 0x12},
        {MISENSOR_8BIT, 0x370b, 0x61},
        {MISENSOR_8BIT, 0x370c, 0xc3},
        {MISENSOR_8BIT, 0x370f, 0x10},
        {MISENSOR_8BIT, 0x3715, 0x08},
        {MISENSOR_8BIT, 0x3717, 0x01},
        {MISENSOR_8BIT, 0x371b, 0x20},
        {MISENSOR_8BIT, 0x3731, 0x22},
        {MISENSOR_8BIT, 0x3739, 0x70},
        {MISENSOR_8BIT, 0x3901, 0x0a},
        {MISENSOR_8BIT, 0x3905, 0x02},
        {MISENSOR_8BIT, 0x3906, 0x10},
        {MISENSOR_8BIT, 0x3719, 0x86},
        {MISENSOR_8BIT, 0x3800, 0x00},
        {MISENSOR_8BIT, 0x3801, 0x00},
        {MISENSOR_8BIT, 0x3802, 0x00},
        {MISENSOR_8BIT, 0x3803, 0x04},
        {MISENSOR_8BIT, 0x3804, 0x0a},
        {MISENSOR_8BIT, 0x3805, 0x3f},
        {MISENSOR_8BIT, 0x3806, 0x07},
        {MISENSOR_8BIT, 0x3807, 0x9b},
        {MISENSOR_8BIT, 0x3808, 0x02},
        {MISENSOR_8BIT, 0x3809, 0x80},
        {MISENSOR_8BIT, 0x380a, 0x01},
        {MISENSOR_8BIT, 0x380b, 0xe0},
        {MISENSOR_8BIT, 0x380c, 0x08},
        {MISENSOR_8BIT, 0x380d, 0x00},
        {MISENSOR_8BIT, 0x380e, 0x04},
        {MISENSOR_8BIT, 0x380f, 0x10},
        {MISENSOR_8BIT, 0x3810, 0x00},
        {MISENSOR_8BIT, 0x3811, 0x10},
        {MISENSOR_8BIT, 0x3812, 0x00},
        {MISENSOR_8BIT, 0x3813, 0x06},
        {MISENSOR_8BIT, 0x3814, 0x31},
        {MISENSOR_8BIT, 0x3815, 0x31},
        {MISENSOR_8BIT, 0x3820, 0x41},
        {MISENSOR_8BIT, 0x3821, 0x07},
        {MISENSOR_8BIT, 0x3824, 0x01},
        {MISENSOR_8BIT, 0x3826, 0x03},
        {MISENSOR_8BIT, 0x3828, 0x08},
        {MISENSOR_8BIT, 0x3a02, 0x03},
        {MISENSOR_8BIT, 0x3a03, 0xab},
        {MISENSOR_8BIT, 0x3a08, 0x01},
        {MISENSOR_8BIT, 0x3a09, 0x39},
        {MISENSOR_8BIT, 0x3a0a, 0x01},
        {MISENSOR_8BIT, 0x3a0b, 0x04},
        {MISENSOR_8BIT, 0x3a0e, 0x03},
        {MISENSOR_8BIT, 0x3a0d, 0x04},
        {MISENSOR_8BIT, 0x3a14, 0x03},
        {MISENSOR_8BIT, 0x3a15, 0xab},
        {MISENSOR_8BIT, 0x3a18, 0x00},
        {MISENSOR_8BIT, 0x3a19, 0x50},
        {MISENSOR_8BIT, 0x3c01, 0x34},
        {MISENSOR_8BIT, 0x3c04, 0x28},
        {MISENSOR_8BIT, 0x3c05, 0x98},
        {MISENSOR_8BIT, 0x3c07, 0x07},
        {MISENSOR_8BIT, 0x3c09, 0xc2},
        {MISENSOR_8BIT, 0x3c0a, 0x9c},
        {MISENSOR_8BIT, 0x3c0b, 0x40},
        {MISENSOR_8BIT, 0x3c01, 0x84},
        {MISENSOR_8BIT, 0x3c00, 0x04},
        {MISENSOR_8BIT, 0x4001, 0x02},
        {MISENSOR_8BIT, 0x4004, 0x02},
        {MISENSOR_8BIT, 0x4005, 0x18},
        {MISENSOR_8BIT, 0x4050, 0x6e},
        {MISENSOR_8BIT, 0x4051, 0x8f},
        {MISENSOR_8BIT, 0x4300, 0x32},
        {MISENSOR_8BIT, 0x4514, 0x00},// 00
        {MISENSOR_8BIT, 0x4520, 0xb0},
        {MISENSOR_8BIT, 0x460b, 0x37},
        {MISENSOR_8BIT, 0x460c, 0x20},
        {MISENSOR_8BIT, 0x4818, 0x01},
        {MISENSOR_8BIT, 0x481d, 0xf0},
        {MISENSOR_8BIT, 0x481f, 0x50},
        {MISENSOR_8BIT, 0x4823, 0x70},
        {MISENSOR_8BIT, 0x4831, 0x14},
        {MISENSOR_8BIT, 0x4837, 0x20},
        {MISENSOR_8BIT, 0x4800, 0x24},
        {MISENSOR_8BIT, 0x5000, 0xa7},
        {MISENSOR_8BIT, 0x5001, 0xa3},
        {MISENSOR_8BIT, 0x501d, 0x00},
        {MISENSOR_8BIT, 0x501f, 0x00},
        {MISENSOR_8BIT, 0x503d, 0x00},
        {MISENSOR_8BIT, 0x505c, 0x30},
        {MISENSOR_8BIT, 0x5181, 0x59},
        {MISENSOR_8BIT, 0x5183, 0x00},
        {MISENSOR_8BIT, 0x5191, 0xf0},
        {MISENSOR_8BIT, 0x5192, 0x03},
        {MISENSOR_8BIT, 0x5684, 0x10},
        {MISENSOR_8BIT, 0x5685, 0xa0},
        {MISENSOR_8BIT, 0x5686, 0x0c},
        {MISENSOR_8BIT, 0x5687, 0x78},
        {MISENSOR_8BIT, 0x5a00, 0x08},
        {MISENSOR_8BIT, 0x5a21, 0x00},
        {MISENSOR_8BIT, 0x5a24, 0x00},
        {MISENSOR_8BIT, 0x3008, 0x02},
        {MISENSOR_8BIT, 0x3503, 0x00},

	//awb
	{MISENSOR_8BIT,0x5180, 0xff},
	{MISENSOR_8BIT,0x5181, 0xf2},
	{MISENSOR_8BIT,0x5182, 0x00},
	{MISENSOR_8BIT,0x5183, 0x14},
	{MISENSOR_8BIT,0x5184, 0x25},
	{MISENSOR_8BIT,0x5185, 0x24},
	{MISENSOR_8BIT,0x5186, 0x16},
	{MISENSOR_8BIT,0x5187, 0x16},
	{MISENSOR_8BIT,0x5188, 0x16},
	{MISENSOR_8BIT,0x5189, 0x64},
	{MISENSOR_8BIT,0x518a, 0x5c},
	{MISENSOR_8BIT,0x518b, 0xe0},
	{MISENSOR_8BIT,0x518c, 0xb2},
	{MISENSOR_8BIT,0x518d, 0x42},
	{MISENSOR_8BIT,0x518e, 0x30},
	{MISENSOR_8BIT,0x518f, 0x4c},
	{MISENSOR_8BIT,0x5190, 0x56},
	{MISENSOR_8BIT,0x5191, 0xf8},
	{MISENSOR_8BIT,0x5192, 0x04},
	{MISENSOR_8BIT,0x5193, 0x70},
	{MISENSOR_8BIT,0x5194, 0xf0},
	{MISENSOR_8BIT,0x5195, 0xf0},
	{MISENSOR_8BIT,0x5196, 0x03},
	{MISENSOR_8BIT,0x5197, 0x01},
	{MISENSOR_8BIT,0x5198, 0x04},
	{MISENSOR_8BIT,0x5199, 0x12},
	{MISENSOR_8BIT,0x519a, 0x04},
	{MISENSOR_8BIT,0x519b, 0x00},
	{MISENSOR_8BIT,0x519c, 0x06},
	{MISENSOR_8BIT,0x519d, 0x82},
	{MISENSOR_8BIT,0x519e, 0x38},


	//matrix	
	{MISENSOR_8BIT,0x5381, 0x1b},
	{MISENSOR_8BIT,0x5382, 0x5b},
	{MISENSOR_8BIT,0x5383, 0x05},
	{MISENSOR_8BIT,0x5384, 0x05},
	{MISENSOR_8BIT,0x5385, 0x75},
	{MISENSOR_8BIT,0x5386, 0x80},
	{MISENSOR_8BIT,0x5387, 0x79},
	{MISENSOR_8BIT,0x5388, 0x74},
	{MISENSOR_8BIT,0x5389, 0x0a},
	{MISENSOR_8BIT,0x538A, 0x01},
	{MISENSOR_8BIT,0x538B, 0x98},


		
        {MISENSOR_8BIT, 0x5300, 0x08},
        {MISENSOR_8BIT, 0x5301, 0x30},
        {MISENSOR_8BIT, 0x5302, 0x2c},//sharpness
        {MISENSOR_8BIT, 0x5303, 0x10},
        {MISENSOR_8BIT, 0x5304, 0x08},
        {MISENSOR_8BIT, 0x5305, 0x30},
        {MISENSOR_8BIT, 0x5306, 0x02},
        {MISENSOR_8BIT, 0x5307, 0x12},
        {MISENSOR_8BIT, 0x5309, 0x08},
        {MISENSOR_8BIT, 0x530a, 0x30},
        {MISENSOR_8BIT, 0x530b, 0x04},
        {MISENSOR_8BIT, 0x530c, 0x06},
        {MISENSOR_8BIT, 0x5480, 0x01},

	//gamma
	{MISENSOR_8BIT,0x5481, 0x06},
	{MISENSOR_8BIT,0x5482, 0x0c},
	{MISENSOR_8BIT,0x5483, 0x24},
	{MISENSOR_8BIT,0x5484, 0x4a},
	{MISENSOR_8BIT,0x5485, 0x58},
	{MISENSOR_8BIT,0x5486, 0x65},
	{MISENSOR_8BIT,0x5487, 0x72},
	{MISENSOR_8BIT,0x5488, 0x7d},
	{MISENSOR_8BIT,0x5489, 0x88},
	{MISENSOR_8BIT,0x548A, 0x92},
	{MISENSOR_8BIT,0x548B, 0xA3},
	{MISENSOR_8BIT,0x548C, 0xB2},
	{MISENSOR_8BIT,0x548D, 0xC8},
	{MISENSOR_8BIT,0x548E, 0xDD},
	{MISENSOR_8BIT,0x548F, 0xF0},
	{MISENSOR_8BIT,0x5490, 0x15},


		
        {MISENSOR_8BIT, 0x5580, 0x06},
        {MISENSOR_8BIT, 0x5583, 0x40},
        {MISENSOR_8BIT, 0x5584, 0x10},
        {MISENSOR_8BIT, 0x5589, 0x10},
        {MISENSOR_8BIT, 0x558a, 0x00},
        {MISENSOR_8BIT, 0x558b, 0xf8},

	//lens
	{MISENSOR_8BIT,0x5800, 0x1D},
	{MISENSOR_8BIT,0x5801, 0x16},
	{MISENSOR_8BIT,0x5802, 0x11},
	{MISENSOR_8BIT,0x5803, 0x10},
	{MISENSOR_8BIT,0x5804, 0x15},
	{MISENSOR_8BIT,0x5805, 0x1c},
	{MISENSOR_8BIT,0x5806, 0x10},
	{MISENSOR_8BIT,0x5807, 0x09},
	{MISENSOR_8BIT,0x5808, 0x06},
	{MISENSOR_8BIT,0x5809, 0x06},
	{MISENSOR_8BIT,0x580a, 0x08},
	{MISENSOR_8BIT,0x580b, 0x0e},
	{MISENSOR_8BIT,0x580c, 0x09},
	{MISENSOR_8BIT,0x580d, 0x03},
	{MISENSOR_8BIT,0x580e, 0x01},
	{MISENSOR_8BIT,0x580f, 0x01},
	{MISENSOR_8BIT,0x5810, 0x03},
	{MISENSOR_8BIT,0x5811, 0x08},
	{MISENSOR_8BIT,0x5812, 0x0A},
	{MISENSOR_8BIT,0x5813, 0x03},
	{MISENSOR_8BIT,0x5814, 0x01},
	{MISENSOR_8BIT,0x5815, 0x01},
	{MISENSOR_8BIT,0x5816, 0x03},
	{MISENSOR_8BIT,0x5817, 0x08},
	{MISENSOR_8BIT,0x5818, 0x10},
	{MISENSOR_8BIT,0x5819, 0x0a},
	{MISENSOR_8BIT,0x581a, 0x06},
	{MISENSOR_8BIT,0x581b, 0x06},
	{MISENSOR_8BIT,0x581c, 0x09},
	{MISENSOR_8BIT,0x581d, 0x0e},
	{MISENSOR_8BIT,0x581e, 0x1f},
	{MISENSOR_8BIT,0x581f, 0x16},
	{MISENSOR_8BIT,0x5820, 0x11},
	{MISENSOR_8BIT,0x5821, 0x11},
	{MISENSOR_8BIT,0x5822, 0x16},
	{MISENSOR_8BIT,0x5823, 0x20},
	{MISENSOR_8BIT,0x5824, 0xAC},
	{MISENSOR_8BIT,0x5825, 0x4a},
	{MISENSOR_8BIT,0x5826, 0x2a},
	{MISENSOR_8BIT,0x5827, 0x48},
	{MISENSOR_8BIT,0x5828, 0x88},
	{MISENSOR_8BIT,0x5829, 0x0a},
	{MISENSOR_8BIT,0x582a, 0x04},
	{MISENSOR_8BIT,0x582b, 0x04},
	{MISENSOR_8BIT,0x582c, 0x04},
	{MISENSOR_8BIT,0x582d, 0x0a},
	{MISENSOR_8BIT,0x582e, 0x08},
	{MISENSOR_8BIT,0x582f, 0x22},
	{MISENSOR_8BIT,0x5830, 0x20},
	{MISENSOR_8BIT,0x5831, 0x22},
	{MISENSOR_8BIT,0x5832, 0x08},
	{MISENSOR_8BIT,0x5833, 0x2A},
	{MISENSOR_8BIT,0x5834, 0x06},
	{MISENSOR_8BIT,0x5835, 0x24},
	{MISENSOR_8BIT,0x5836, 0x26},
	{MISENSOR_8BIT,0x5837, 0x0a},
	{MISENSOR_8BIT,0x5838, 0x68},
	{MISENSOR_8BIT,0x5839, 0x4a},
	{MISENSOR_8BIT,0x583a, 0x4c},
	{MISENSOR_8BIT,0x583b, 0x48},
	{MISENSOR_8BIT,0x583c, 0x46},
	{MISENSOR_8BIT,0x583d, 0xee},


		
        {MISENSOR_8BIT, 0x5025, 0x00},
        {MISENSOR_8BIT, 0x3a0f, 0x30},
        {MISENSOR_8BIT, 0x3a10, 0x28},
        {MISENSOR_8BIT, 0x3a11, 0x60},
        {MISENSOR_8BIT, 0x3a1b, 0x30},
        {MISENSOR_8BIT, 0x3a1e, 0x28},
        {MISENSOR_8BIT, 0x3a1f, 0x10},
        {MISENSOR_8BIT, 0x3023, 0x01},
        {MISENSOR_8BIT, 0x3022, 0x04},
        {MISENSOR_8BIT, 0x3008, 0x02},
        {MISENSOR_8BIT, 0x5302, 0x30},
        {MISENSOR_8BIT, 0x5303, 0x10},
        {MISENSOR_8BIT, 0x5306, 0x08},
        {MISENSOR_8BIT, 0x5307, 0x16},
        {MISENSOR_TOK_TERM, 0, 0}
};
       
static struct misensor_reg const ov5645_focus_init[] = {
	{MISENSOR_8BIT, 0x3022, 0x00},
	{MISENSOR_8BIT, 0x3023, 0x00},
	{MISENSOR_8BIT, 0x3024, 0x00},
	{MISENSOR_8BIT, 0x3025, 0x00},
	{MISENSOR_8BIT, 0x3026, 0x00},
	{MISENSOR_8BIT, 0x3027, 0x00},
	{MISENSOR_8BIT, 0x3028, 0x00},
	{MISENSOR_8BIT, 0x3029, 0x7F},
	{MISENSOR_8BIT, 0x3000, 0x00},
	{MISENSOR_TOK_TERM, 0, 0}
};
//Begin [song.yuanqiao@byd.com,2013-08-16]

int ov5645_af_firmware[]=
{
	//0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	0x02, 0x15, 0x5c, 0x02, 0x12, 0x01, 0xc2, 0x01, 0x22, 0x00, 0x00, 0x02, 0x15, 0x18, 0x78, 0xc3, //0x8000,
	0xe6, 0x18, 0xf6, 0xe5, 0x30, 0xc3, 0x13, 0xfc, 0xe5, 0x31, 0x13, 0xfd, 0xe5, 0x2e, 0xc3, 0x13, //0x8010,
	0xfe, 0xe5, 0x2f, 0x13, 0x2d, 0x78, 0x9b, 0xf6, 0xee, 0x3c, 0x18, 0xf6, 0x78, 0xc3, 0xa6, 0x4f, //0x8020,
	0xe5, 0x1e, 0x70, 0x6b, 0xe6, 0x12, 0x0f, 0x25, 0xff, 0x33, 0x95, 0xe0, 0xfe, 0x74, 0x9d, 0x2f, //0x8030,
	0xf5, 0x82, 0x74, 0x0e, 0x3e, 0xf5, 0x83, 0xe4, 0x93, 0x78, 0xc1, 0xf6, 0x75, 0x4e, 0x02, 0x12, //0x8040,
	0x0f, 0x31, 0x78, 0x56, 0x12, 0x0f, 0x2c, 0x78, 0x96, 0x12, 0x0f, 0x2c, 0x12, 0x0f, 0x91, 0x78, //0x8050,
	0xc3, 0xe6, 0x78, 0x9e, 0xf6, 0x78, 0xc3, 0xe6, 0x78, 0xbe, 0xf6, 0x78, 0xc3, 0xe6, 0x78, 0xbf, //0x8060,
	0xf6, 0x08, 0x76, 0x02, 0x78, 0xc5, 0x76, 0x01, 0x08, 0x76, 0x01, 0x08, 0x76, 0x01, 0xe6, 0x78, //0x8070,
	0xc9, 0xf6, 0xe6, 0x78, 0xcb, 0xf6, 0x78, 0xc9, 0xe6, 0x78, 0xcc, 0xf6, 0xe4, 0x08, 0xf6, 0x08, //0x8080,
	0xf6, 0x08, 0x76, 0x40, 0x78, 0xc3, 0xe6, 0x78, 0xd0, 0xf6, 0xe4, 0x08, 0xf6, 0xc2, 0x38, 0xe5, //0x8090,
	0x1e, 0x64, 0x06, 0x70, 0x2e, 0xd3, 0x78, 0xc0, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, 0x02, 0x16, //0x80a0,
	0x22, 0xa2, 0x38, 0xe4, 0x33, 0xf5, 0x41, 0x90, 0x30, 0x28, 0xf0, 0xe4, 0xf5, 0x1e, 0xc2, 0x01, //0x80b0,
	0x75, 0x1d, 0x10, 0xd2, 0x36, 0x78, 0x52, 0xa6, 0x2e, 0x08, 0xa6, 0x2f, 0x08, 0xa6, 0x30, 0x08, //0x80c0,
	0xa6, 0x31, 0x22, 0x79, 0xc3, 0xe7, 0x78, 0xc1, 0x26, 0x78, 0xc4, 0xf6, 0xc3, 0x78, 0xce, 0xe6, //0x80d0,
	0x64, 0x80, 0xf8, 0x09, 0xe7, 0x64, 0x80, 0x98, 0x50, 0x06, 0x78, 0xce, 0xe6, 0x78, 0xc4, 0xf6, //0x80e0,
	0xd3, 0x78, 0xcf, 0xe6, 0x64, 0x80, 0xf8, 0x79, 0xc4, 0xe7, 0x64, 0x80, 0x98, 0x40, 0x06, 0x78, //0x80f0,
	0xcf, 0xe6, 0x78, 0xc4, 0xf6, 0x78, 0xc4, 0xe6, 0xf5, 0x4f, 0x12, 0x12, 0xaf, 0x78, 0xc1, 0xe6, //0x8100,
	0xff, 0x33, 0x95, 0xe0, 0xfe, 0x12, 0x15, 0x2e, 0x8f, 0x0a, 0xd3, 0xe5, 0x0a, 0x64, 0x80, 0x94, //0x8110,
	0x86, 0x40, 0x05, 0x75, 0x1e, 0x01, 0x80, 0x1f, 0xd3, 0xe5, 0x0a, 0x64, 0x80, 0x94, 0x83, 0x40, //0x8120,
	0x05, 0x75, 0x1e, 0x02, 0x80, 0x11, 0xd3, 0xe5, 0x0a, 0x64, 0x80, 0x94, 0x81, 0x40, 0x05, 0x75, //0x8130,
	0x1e, 0x03, 0x80, 0x03, 0x75, 0x1e, 0x04, 0xd3, 0x78, 0xc0, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, //0x8140,
	0x02, 0x16, 0x22, 0x78, 0xc6, 0xe6, 0x18, 0xf6, 0x08, 0x06, 0x78, 0xc2, 0xe6, 0xff, 0x12, 0x0f, //0x8150,
	0x99, 0x12, 0x0f, 0x2f, 0x78, 0xc5, 0xe6, 0x25, 0xe0, 0x24, 0x56, 0xf8, 0xa6, 0x06, 0x08, 0xa6, //0x8160,
	0x07, 0x79, 0xc5, 0xe7, 0x78, 0xc7, 0x66, 0x70, 0x05, 0xe6, 0x78, 0xc9, 0xf6, 0x22, 0x78, 0xc5, //0x8170,
	0xe6, 0x78, 0x99, 0x12, 0x0e, 0xfa, 0x40, 0x0d, 0x78, 0xc5, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, //0x8180,
	0xe6, 0xff, 0x12, 0x0f, 0x91, 0x78, 0xc5, 0xe6, 0x25, 0xe0, 0x24, 0x57, 0xf9, 0xc3, 0xe7, 0x78, //0x8190,
	0x97, 0x96, 0x19, 0xe7, 0x18, 0x96, 0x50, 0x11, 0x78, 0xc5, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, //0x81a0,
	0xe6, 0xff, 0x78, 0x96, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x78, 0xc5, 0xe6, 0x25, 0xe0, 0x24, 0x57, //0x81b0,
	0xf9, 0x78, 0xc9, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, 0xe6, 0xc3, 0x97, 0xee, 0x19, 0x97, 0x50, //0x81c0,
	0x06, 0x78, 0xc5, 0xe6, 0x78, 0xc9, 0xf6, 0x78, 0xc5, 0xe6, 0x24, 0x9e, 0x78, 0xbe, 0x12, 0x0f, //0x81d0,
	0x09, 0x40, 0x07, 0x12, 0x0f, 0x99, 0xe6, 0x78, 0xbe, 0xf6, 0x78, 0xc5, 0xe6, 0x24, 0x9e, 0x78, //0x81e0,
	0xbf, 0x12, 0x0e, 0xe8, 0x50, 0x07, 0x12, 0x0f, 0x99, 0xe6, 0x78, 0xbf, 0xf6, 0x78, 0xc5, 0xe6, //0x81f0,
	0x78, 0xc8, 0xf6, 0x12, 0x10, 0x7f, 0x12, 0x0c, 0x86, 0x12, 0x14, 0xdd, 0x78, 0xcd, 0xa6, 0x07, //0x8200,
	0xe6, 0x24, 0x02, 0x70, 0x03, 0x02, 0x02, 0x9e, 0x14, 0x70, 0x03, 0x02, 0x02, 0x9e, 0x24, 0xfe, //0x8210,
	0x60, 0x03, 0x02, 0x03, 0xb1, 0xd2, 0x38, 0x12, 0x0f, 0x16, 0x40, 0x16, 0x78, 0xc9, 0xe6, 0x24, //0x8220,
	0x9d, 0x12, 0x0e, 0xe6, 0x50, 0x20, 0x78, 0xc9, 0xe6, 0x24, 0x9d, 0xf8, 0xe6, 0x78, 0xce, 0xf6, //0x8230,
	0x80, 0x14, 0x78, 0xc9, 0xe6, 0x24, 0x9d, 0x12, 0x0f, 0x07, 0x40, 0x0a, 0x78, 0xc9, 0xe6, 0x24, //0x8240,
	0x9d, 0xf8, 0xe6, 0x78, 0xcf, 0xf6, 0x78, 0xca, 0x12, 0x0f, 0x52, 0x79, 0xc2, 0xe7, 0x78, 0xc3, //0x8250,
	0x66, 0x60, 0x03, 0x02, 0x04, 0x9f, 0x78, 0xd1, 0x06, 0xe5, 0x1e, 0xb4, 0x01, 0x07, 0x12, 0x0f, //0x8260,
	0x1f, 0xf6, 0x09, 0x80, 0x1e, 0xe5, 0x1e, 0xb4, 0x02, 0x08, 0x12, 0x0f, 0x1f, 0xf6, 0x79, 0xc3, //0x8270,
	0x80, 0x11, 0xe5, 0x1e, 0xb4, 0x03, 0x14, 0x78, 0xc1, 0xe6, 0xf4, 0x04, 0xff, 0xa2, 0xe7, 0x13, //0x8280,
	0xf6, 0x79, 0xc3, 0xe7, 0x26, 0x78, 0xc4, 0xf6, 0x02, 0x04, 0x8a, 0x02, 0x04, 0x1c, 0xd2, 0x38, //0x8290,
	0x78, 0xd1, 0x06, 0xc3, 0x12, 0x0f, 0x17, 0x50, 0x25, 0x79, 0xc9, 0xe7, 0x78, 0xc5, 0x66, 0x78, //0x82a0,
	0xc9, 0x60, 0x05, 0xe6, 0x04, 0xff, 0x80, 0x02, 0xe6, 0xff, 0x8f, 0x0a, 0x74, 0x9e, 0x2f, 0x12, //0x82b0,
	0x0e, 0xe6, 0x50, 0x2d, 0x74, 0x9e, 0x2f, 0xf8, 0xe6, 0x78, 0xce, 0xf6, 0x80, 0x23, 0x79, 0xc9, //0x82c0,
	0xe7, 0x78, 0xc5, 0x66, 0x78, 0xc9, 0x60, 0x05, 0xe6, 0x04, 0xff, 0x80, 0x02, 0xe6, 0xff, 0x8f, //0x82d0,
	0x0a, 0x74, 0x9e, 0x2f, 0x12, 0x0f, 0x07, 0x40, 0x08, 0x74, 0x9e, 0x2f, 0xf8, 0xe6, 0x78, 0xcf, //0x82e0,
	0xf6, 0x12, 0x0f, 0x50, 0x78, 0xc1, 0xe6, 0xff, 0x33, 0x95, 0xe0, 0xfe, 0xef, 0x78, 0x02, 0xc3, //0x82f0,
	0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0xff, 0x12, 0x15, 0x2e, 0x78, 0xce, 0xe6, 0xfd, 0x33, 0x95, //0x8300,
	0xe0, 0xfc, 0x08, 0xe6, 0xfb, 0x33, 0x95, 0xe0, 0xfa, 0xc3, 0xeb, 0x9d, 0xfd, 0xea, 0x9c, 0xfc, //0x8310,
	0xd3, 0xed, 0x9f, 0xee, 0x64, 0x80, 0xf8, 0xec, 0x64, 0x80, 0x98, 0x40, 0x02, 0x80, 0x01, 0xd3, //0x8320,
	0x92, 0x3a, 0xe5, 0x1e, 0x64, 0x01, 0x70, 0x21, 0x12, 0x0f, 0x72, 0x30, 0x3a, 0x05, 0xe6, 0xa2, //0x8330,
	0xe7, 0x13, 0xf6, 0x12, 0x0f, 0x16, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, //0x8340,
	0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, 0xe5, 0x1e, 0x64, 0x02, 0x70, 0x21, 0x12, //0x8350,
	0x0f, 0x72, 0x30, 0x3a, 0x05, 0xe6, 0xa2, 0xe7, 0x13, 0xf6, 0x12, 0x0f, 0x16, 0x40, 0x06, 0x78, //0x8360,
	0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, //0x8370,
	0xe5, 0x1e, 0x64, 0x03, 0x70, 0x21, 0x12, 0x0f, 0x72, 0x30, 0x3a, 0x05, 0xe6, 0xa2, 0xe7, 0x13, //0x8380,
	0xf6, 0x12, 0x0f, 0x16, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, //0x8390,
	0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, 0x78, 0xc0, 0x76, 0x01, 0x12, 0x0f, 0xa0, 0x02, 0x04, //0x83a0,
	0x9c, 0x79, 0xc2, 0xe7, 0x78, 0xc3, 0x66, 0x60, 0x03, 0x02, 0x04, 0x9f, 0x78, 0xd1, 0x06, 0xc3, //0x83b0,
	0x12, 0x0f, 0x17, 0x50, 0x16, 0x78, 0xc9, 0xe6, 0x24, 0x9f, 0x12, 0x0e, 0xe6, 0x50, 0x20, 0x78, //0x83c0,
	0xc9, 0xe6, 0x24, 0x9f, 0xf8, 0xe6, 0x78, 0xce, 0xf6, 0x80, 0x14, 0x78, 0xc9, 0xe6, 0x24, 0x9f, //0x83d0,
	0x12, 0x0f, 0x07, 0x40, 0x0a, 0x78, 0xc9, 0xe6, 0x24, 0x9f, 0xf8, 0xe6, 0x78, 0xcf, 0xf6, 0x12, //0x83e0,
	0x0f, 0x50, 0x20, 0x38, 0x2e, 0xc3, 0x08, 0xe6, 0x64, 0x80, 0x94, 0x82, 0x50, 0x1b, 0x12, 0x0f, //0x83f0,
	0x72, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, //0x8400,
	0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, 0x12, 0x0f, 0xa0, 0x78, 0xc0, 0x76, 0x01, //0x8410,
	0x02, 0x04, 0x9c, 0xe5, 0x1e, 0x64, 0x01, 0x70, 0x1d, 0x78, 0xc1, 0xe6, 0xf4, 0x04, 0x12, 0x0f, //0x8420,
	0x25, 0x12, 0x0f, 0x81, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, //0x8430,
	0x78, 0xc4, 0xa6, 0x07, 0x80, 0x44, 0xe5, 0x1e, 0x64, 0x02, 0x70, 0x1d, 0x78, 0xc1, 0xe6, 0xf4, //0x8440,
	0x04, 0x12, 0x0f, 0x25, 0x12, 0x0f, 0x81, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, //0x8450,
	0xcf, 0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x80, 0x21, 0xe5, 0x1e, 0x64, 0x03, 0x70, 0x26, 0x78, //0x8460,
	0xc1, 0xe6, 0xf4, 0x04, 0xa2, 0xe7, 0x13, 0x12, 0x0f, 0x81, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, //0x8470,
	0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x78, 0xc6, 0xe6, 0x08, 0xf6, 0x78, //0x8480,
	0xc0, 0x76, 0x01, 0x80, 0x0a, 0x12, 0x0f, 0xa0, 0x78, 0xc0, 0x76, 0x01, 0x75, 0x1e, 0x06, 0x78, //0x8490,
	0xc4, 0xe6, 0xf5, 0x4f, 0x12, 0x12, 0xaf, 0x22, 0x30, 0x01, 0x03, 0x02, 0x08, 0x5f, 0x30, 0x02, //0x84a0,
	0x03, 0x02, 0x08, 0x5f, 0xe5, 0x1e, 0x60, 0x03, 0x02, 0x05, 0x3b, 0x75, 0x1d, 0x20, 0xd2, 0x36, //0x84b0,
	0xd3, 0x78, 0x53, 0xe6, 0x94, 0x00, 0x18, 0xe6, 0x94, 0x00, 0x40, 0x07, 0xe6, 0xfe, 0x08, 0xe6, //0x84c0,
	0xff, 0x80, 0x0e, 0x90, 0x0e, 0x8d, 0xe4, 0x93, 0x25, 0xe0, 0x25, 0xe0, 0x24, 0x2a, 0x12, 0x11, //0x84d0,
	0x8e, 0x78, 0x52, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0xd3, 0x78, 0x55, 0xe6, 0x94, 0x00, 0x18, 0xe6, //0x84e0,
	0x94, 0x00, 0x40, 0x07, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x80, 0x08, 0x90, 0x0e, 0x8d, 0xe4, 0x93, //0x84f0,
	0x12, 0x11, 0x88, 0x78, 0x54, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x12, 0x11, 0xd8, 0x12, 0x11, 0xa9, //0x8500,
	0x78, 0x5a, 0x12, 0x11, 0x82, 0x78, 0x5c, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x12, 0x11, 0xd8, 0x78, //0x8510,
	0xad, 0xa6, 0x33, 0x08, 0xa6, 0x33, 0x08, 0xa6, 0x35, 0x78, 0xb3, 0xa6, 0x33, 0x08, 0xa6, 0x33, //0x8520,
	0x08, 0xa6, 0x35, 0x75, 0x1e, 0x01, 0x78, 0xaa, 0x76, 0x01, 0x22, 0xe5, 0x1e, 0xb4, 0x05, 0x10, //0x8530,
	0xd2, 0x01, 0xc2, 0x02, 0xe4, 0xf5, 0x1e, 0xf5, 0x1d, 0xd2, 0x36, 0xd2, 0x34, 0xd2, 0x37, 0x22, //0x8540,
	0x12, 0x11, 0xc7, 0x24, 0xb3, 0x12, 0x11, 0xc4, 0x24, 0xb4, 0x12, 0x11, 0xc4, 0x24, 0xb5, 0xf8, //0x8550,
	0xa6, 0x35, 0x12, 0x11, 0xa9, 0x12, 0x11, 0xbc, 0x24, 0x5a, 0xf8, 0x12, 0x11, 0x82, 0x12, 0x11, //0x8560,
	0xbc, 0x24, 0x5c, 0xf8, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x12, 0x11, 0xbc, 0x24, 0x5e, 0xf8, 0xa6, //0x8570,
	0x2a, 0x08, 0xa6, 0x2b, 0x12, 0x11, 0xbc, 0x24, 0x60, 0xf8, 0xa6, 0x2c, 0x08, 0xa6, 0x2d, 0x90, //0x8580,
	0x0e, 0x99, 0xe4, 0x93, 0x24, 0xff, 0xff, 0xe4, 0x34, 0xff, 0xfe, 0x78, 0xaa, 0xe6, 0x24, 0x01, //0x8590,
	0xfd, 0xe4, 0x33, 0xfc, 0xd3, 0xed, 0x9f, 0xee, 0x64, 0x80, 0xf8, 0xec, 0x64, 0x80, 0x98, 0x40, //0x85a0,
	0x04, 0x7f, 0x00, 0x80, 0x05, 0x78, 0xaa, 0xe6, 0x04, 0xff, 0x78, 0xaa, 0xa6, 0x07, 0xe5, 0x1e, //0x85b0,
	0xb4, 0x01, 0x07, 0xe6, 0x70, 0x04, 0x75, 0x1e, 0x02, 0x22, 0xe4, 0x78, 0xab, 0xf6, 0x08, 0xf6, //0x85c0,
	0xf5, 0x0b, 0x12, 0x11, 0xcf, 0xf5, 0x14, 0x08, 0xe6, 0xf5, 0x15, 0x12, 0x11, 0xcf, 0xf5, 0x16, //0x85d0,
	0x08, 0xe6, 0xf5, 0x17, 0x12, 0x11, 0xcf, 0xfe, 0x08, 0xe6, 0xff, 0x12, 0x11, 0xf0, 0x75, 0x0a, //0x85e0,
	0x01, 0x90, 0x0e, 0x99, 0xe4, 0x93, 0xfb, 0xe5, 0x0a, 0xc3, 0x9b, 0x50, 0x67, 0x12, 0x11, 0x73, //0x85f0,
	0xf8, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0xe4, 0xfc, 0xfd, 0xe5, 0x0f, 0x2f, 0xf5, 0x0f, 0xe5, 0x0e, //0x8600,
	0x3e, 0xf5, 0x0e, 0xed, 0x35, 0x0d, 0xf5, 0x0d, 0xec, 0x35, 0x0c, 0xf5, 0x0c, 0xe5, 0x0a, 0x75, //0x8610,
	0xf0, 0x08, 0xa4, 0x24, 0x5b, 0x12, 0x11, 0x7b, 0xf9, 0xc3, 0xe5, 0x15, 0x97, 0xe5, 0x14, 0x19, //0x8620,
	0x97, 0x50, 0x0b, 0x12, 0x11, 0x73, 0xf8, 0xe6, 0xf5, 0x14, 0x08, 0xe6, 0xf5, 0x15, 0xe5, 0x0a, //0x8630,
	0x75, 0xf0, 0x08, 0xa4, 0x24, 0x5b, 0x12, 0x11, 0x7b, 0xf9, 0xd3, 0xe5, 0x17, 0x97, 0xe5, 0x16, //0x8640,
	0x19, 0x97, 0x40, 0x0b, 0x12, 0x11, 0x73, 0xf8, 0xe6, 0xf5, 0x16, 0x08, 0xe6, 0xf5, 0x17, 0x05, //0x8650,
	0x0a, 0x02, 0x05, 0xf1, 0xe4, 0xfa, 0xf9, 0xf8, 0xaf, 0x0f, 0xae, 0x0e, 0xad, 0x0d, 0xac, 0x0c, //0x8660,
	0x12, 0x0b, 0x7b, 0x8e, 0x18, 0x8f, 0x19, 0xc3, 0xe5, 0x15, 0x95, 0x17, 0xff, 0xe5, 0x14, 0x95, //0x8670,
	0x16, 0xfe, 0xe5, 0x0b, 0x25, 0xe0, 0x24, 0x53, 0xf9, 0xd3, 0xe5, 0x15, 0x97, 0xe5, 0x14, 0x19, //0x8680,
	0x97, 0xe5, 0x0b, 0x40, 0x11, 0x25, 0xe0, 0x24, 0x53, 0xf8, 0xc3, 0xe5, 0x15, 0x96, 0xfd, 0xe5, //0x8690,
	0x14, 0x18, 0x96, 0xfc, 0x80, 0x0f, 0x25, 0xe0, 0x24, 0x53, 0xf8, 0xc3, 0xe6, 0x95, 0x15, 0xfd, //0x86a0,
	0x18, 0xe6, 0x95, 0x14, 0xfc, 0x8c, 0x1a, 0x8d, 0x1b, 0x12, 0x11, 0xf0, 0x12, 0x11, 0x6a, 0x90, //0x86b0,
	0x0e, 0x8e, 0x12, 0x11, 0x95, 0xe4, 0x85, 0x15, 0x13, 0x85, 0x14, 0x12, 0xf5, 0x11, 0xf5, 0x10, //0x86c0,
	0xaf, 0x13, 0xae, 0x12, 0x7b, 0x04, 0x12, 0x11, 0x58, 0xc3, 0x12, 0x0c, 0x0d, 0x50, 0x11, 0xaf, //0x86d0,
	0x0b, 0x74, 0x01, 0xa8, 0x07, 0x08, 0x80, 0x02, 0xc3, 0x33, 0xd8, 0xfc, 0x78, 0xab, 0x26, 0xf6, //0x86e0,
	0xe4, 0x85, 0x1b, 0x0f, 0x85, 0x1a, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0x12, 0x11, 0x6a, 0x90, 0x0e, //0x86f0,
	0x92, 0x12, 0x11, 0x95, 0xe5, 0x0b, 0x25, 0xe0, 0x24, 0x53, 0xf9, 0xd3, 0xe5, 0x19, 0x97, 0xe5, //0x8700,
	0x18, 0x19, 0x97, 0x40, 0x0e, 0xe5, 0x0b, 0x25, 0xe0, 0x24, 0x52, 0xf8, 0xe6, 0xfe, 0x08, 0xe6, //0x8710,
	0xff, 0x80, 0x04, 0xae, 0x18, 0xaf, 0x19, 0xe4, 0x8f, 0x13, 0x8e, 0x12, 0xf5, 0x11, 0xf5, 0x10, //0x8720,
	0x7b, 0x10, 0x12, 0x11, 0x58, 0xd3, 0x12, 0x0c, 0x0d, 0x40, 0x11, 0xaf, 0x0b, 0x74, 0x01, 0xa8, //0x8730,
	0x07, 0x08, 0x80, 0x02, 0xc3, 0x33, 0xd8, 0xfc, 0x78, 0xac, 0x26, 0xf6, 0x05, 0x0b, 0xe5, 0x0b, //0x8740,
	0x64, 0x04, 0x60, 0x03, 0x02, 0x05, 0xd2, 0xe4, 0xf5, 0x0b, 0x12, 0x11, 0xfa, 0xfb, 0x12, 0x11, //0x8750,
	0xfa, 0xfa, 0x12, 0x11, 0xfa, 0x75, 0x18, 0x00, 0xf5, 0x19, 0x75, 0x0a, 0x01, 0x90, 0x0e, 0x99, //0x8760,
	0xe4, 0x93, 0xff, 0xe5, 0x0a, 0xc3, 0x9f, 0x50, 0x2a, 0x12, 0x11, 0x4b, 0x25, 0x19, 0xf5, 0x19, //0x8770,
	0xe4, 0x35, 0x18, 0xf5, 0x18, 0x12, 0x11, 0x4b, 0xfe, 0xeb, 0xc3, 0x9e, 0x50, 0x04, 0x12, 0x11, //0x8780,
	0x4b, 0xfb, 0x12, 0x11, 0x4b, 0xfe, 0xea, 0xd3, 0x9e, 0x40, 0x04, 0x12, 0x11, 0x4b, 0xfa, 0x05, //0x8790,
	0x0a, 0x80, 0xca, 0xef, 0xfd, 0x7c, 0x00, 0xae, 0x18, 0xaf, 0x19, 0x12, 0x0a, 0x9b, 0xc3, 0xeb, //0x87a0,
	0x9a, 0xfe, 0x74, 0xad, 0x25, 0x0b, 0xf8, 0xe6, 0xfd, 0xef, 0xd3, 0x9d, 0x74, 0xad, 0x40, 0x0b, //0x87b0,
	0x25, 0x0b, 0xf8, 0xe6, 0xfd, 0xc3, 0xef, 0x9d, 0xff, 0x80, 0x07, 0x25, 0x0b, 0xf8, 0xc3, 0xe6, //0x87c0,
	0x9f, 0xff, 0x8f, 0x1c, 0x90, 0x0e, 0x96, 0xe4, 0x93, 0xff, 0xee, 0xc3, 0x9f, 0x50, 0x0d, 0x12, //0x87d0,
	0x11, 0xe5, 0x80, 0x02, 0xc3, 0x33, 0xd8, 0xfc, 0x78, 0xab, 0x26, 0xf6, 0x90, 0x0e, 0x97, 0xe4, //0x87e0,
	0x93, 0xff, 0xe5, 0x1c, 0xd3, 0x9f, 0x40, 0x0d, 0x12, 0x11, 0xe5, 0x80, 0x02, 0xc3, 0x33, 0xd8, //0x87f0,
	0xfc, 0x78, 0xac, 0x26, 0xf6, 0x74, 0xb0, 0x25, 0x0b, 0xf8, 0xa6, 0x1c, 0x05, 0x0b, 0xe5, 0x0b, //0x8800,
	0x64, 0x03, 0x60, 0x03, 0x02, 0x07, 0x5a, 0x78, 0xb1, 0xe6, 0xff, 0x18, 0xe6, 0x2f, 0xff, 0xe4, //0x8810,
	0x33, 0xfe, 0x78, 0xb2, 0xe6, 0x7c, 0x00, 0x2f, 0xf5, 0x1b, 0xec, 0x3e, 0xf5, 0x1a, 0x90, 0x0e, //0x8820,
	0x98, 0xe4, 0x93, 0xff, 0xd3, 0xe5, 0x1b, 0x9f, 0xe5, 0x1a, 0x94, 0x00, 0x40, 0x06, 0x78, 0xac, //0x8830,
	0x74, 0x80, 0x26, 0xf6, 0x78, 0xac, 0xe6, 0x79, 0xab, 0x57, 0xf6, 0xe5, 0x1e, 0xb4, 0x02, 0x0f, //0x8840,
	0x18, 0xe6, 0xb4, 0x7f, 0x0a, 0x08, 0xe6, 0xd3, 0x94, 0x00, 0x40, 0x03, 0x75, 0x1e, 0x05, 0x22, //0x8850,
	0x90, 0x0e, 0x89, 0x12, 0x0c, 0x44, 0x8f, 0x4d, 0x8e, 0x4c, 0x8d, 0x4b, 0x8c, 0x4a, 0x90, 0x38, //0x8860,
	0x04, 0x12, 0x14, 0xa8, 0xfb, 0xaa, 0x06, 0x90, 0x38, 0x00, 0x12, 0x14, 0xa8, 0xff, 0xc3, 0xeb, //0x8870,
	0x9f, 0xfb, 0xea, 0x9e, 0xfa, 0x90, 0x38, 0x10, 0xe0, 0xa3, 0xe0, 0x75, 0xf0, 0x02, 0xa4, 0xff, //0x8880,
	0xc3, 0xeb, 0x9f, 0xfb, 0xea, 0x95, 0xf0, 0xfa, 0x90, 0x38, 0x06, 0xe0, 0xfe, 0xa3, 0xe0, 0xfd, //0x8890,
	0xee, 0xf5, 0x0c, 0xed, 0xf5, 0x0d, 0x90, 0x38, 0x02, 0x12, 0x14, 0xa8, 0xff, 0x12, 0x14, 0x91, //0x88a0,
	0x90, 0x38, 0x12, 0xe0, 0xa3, 0xe0, 0x75, 0xf0, 0x02, 0xa4, 0xff, 0xae, 0xf0, 0x12, 0x14, 0x91, //0x88b0,
	0xa3, 0xe0, 0xb4, 0x31, 0x07, 0xea, 0xc3, 0x13, 0xfa, 0xeb, 0x13, 0xfb, 0x90, 0x38, 0x14, 0xe0, //0x88c0,
	0xb4, 0x71, 0x0f, 0xeb, 0xae, 0x02, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xfb, //0x88d0,
	0xaa, 0x06, 0x90, 0x38, 0x15, 0xe0, 0xb4, 0x31, 0x0b, 0xe5, 0x0c, 0xc3, 0x13, 0xf5, 0x0c, 0xe5, //0x88e0,
	0x0d, 0x13, 0xf5, 0x0d, 0x90, 0x38, 0x15, 0xe0, 0xb4, 0x71, 0x11, 0xe5, 0x0d, 0xae, 0x0c, 0x78, //0x88f0,
	0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xf5, 0x0d, 0x8e, 0x0c, 0xea, 0xc4, 0xf8, 0x54, //0x8900,
	0xf0, 0xc8, 0x68, 0xfa, 0xeb, 0xc4, 0x54, 0x0f, 0x48, 0xfb, 0xe5, 0x0c, 0xc4, 0xf8, 0x54, 0xf0, //0x8910,
	0xc8, 0x68, 0xf5, 0x0c, 0xe5, 0x0d, 0xc4, 0x54, 0x0f, 0x48, 0xf5, 0x0d, 0xe5, 0x41, 0x54, 0x10, //0x8920,
	0xd3, 0x94, 0x00, 0x40, 0x08, 0x85, 0x42, 0x4a, 0x85, 0x43, 0x4b, 0x80, 0x0b, 0x30, 0x39, 0x04, //0x8930,
	0x7f, 0x16, 0x80, 0x02, 0x7f, 0x1e, 0x8f, 0x4b, 0xaf, 0x4a, 0x12, 0x14, 0x76, 0xaf, 0x4b, 0x7e, //0x8940,
	0x00, 0xac, 0x0c, 0xad, 0x0d, 0x12, 0x14, 0x84, 0xfd, 0x7c, 0x00, 0xae, 0x0e, 0xaf, 0x0f, 0x12, //0x8950,
	0x0a, 0x9b, 0x8f, 0x4a, 0xae, 0x10, 0xaf, 0x11, 0x7c, 0x00, 0x30, 0x39, 0x04, 0x7d, 0x2d, 0x80, //0x8960,
	0x02, 0x7d, 0x3c, 0x12, 0x0a, 0x9b, 0x8f, 0x4b, 0x8b, 0x49, 0x85, 0x0d, 0x48, 0xaf, 0x4c, 0x12, //0x8970,
	0x14, 0x76, 0xaf, 0x4d, 0x7e, 0x00, 0x12, 0x14, 0x84, 0xfb, 0xae, 0x0e, 0xaf, 0x0f, 0xfd, 0x7c, //0x8980,
	0x00, 0x12, 0x0a, 0x9b, 0x8f, 0x4c, 0xae, 0x10, 0xaf, 0x11, 0xad, 0x03, 0x7c, 0x00, 0x12, 0x0a, //0x8990,
	0x9b, 0x8f, 0x4d, 0xe5, 0x4c, 0x75, 0xf0, 0x02, 0xa4, 0xad, 0x49, 0x7c, 0x00, 0xd3, 0x9d, 0x74, //0x89a0,
	0x80, 0xf8, 0x65, 0xf0, 0x98, 0x40, 0x05, 0xe5, 0x49, 0x13, 0xf5, 0x4c, 0xe5, 0x4d, 0x75, 0xf0, //0x89b0,
	0x02, 0xa4, 0xd3, 0x95, 0x48, 0x74, 0x80, 0xf8, 0x65, 0xf0, 0x98, 0x40, 0x05, 0xe5, 0x48, 0x13, //0x89c0,
	0xf5, 0x4d, 0xe5, 0x4a, 0xc3, 0x95, 0x4c, 0x50, 0x03, 0x85, 0x4c, 0x4a, 0xe5, 0x4b, 0xc3, 0x95, //0x89d0,
	0x4d, 0x50, 0x03, 0x85, 0x4d, 0x4b, 0xe5, 0x4a, 0x25, 0x4c, 0xff, 0xe4, 0x33, 0xfe, 0xd3, 0xef, //0x89e0,
	0x9d, 0xec, 0x64, 0x80, 0xf8, 0xee, 0x64, 0x80, 0x98, 0x40, 0x06, 0xe5, 0x49, 0x95, 0x4c, 0xf5, //0x89f0,
	0x4a, 0xe5, 0x4b, 0x25, 0x4d, 0xff, 0xe4, 0x33, 0xfe, 0xd3, 0xef, 0x95, 0x48, 0x74, 0x80, 0xf8, //0x8a00,
	0x6e, 0x98, 0x40, 0x06, 0xe5, 0x48, 0x95, 0x4d, 0xf5, 0x4b, 0xc3, 0xe5, 0x4a, 0x95, 0x4c, 0xf5, //0x8a10,
	0x0a, 0xc3, 0xe5, 0x4b, 0x95, 0x4d, 0xf5, 0x0b, 0xe5, 0x4a, 0x25, 0x4c, 0xf9, 0xe5, 0x4b, 0x25, //0x8a20,
	0x4d, 0xfd, 0x90, 0x60, 0x01, 0xe4, 0xf0, 0xa3, 0xf0, 0xa3, 0xe5, 0x49, 0xf0, 0xa3, 0xe5, 0x48, //0x8a30,
	0xf0, 0x7c, 0x01, 0xec, 0x75, 0xf0, 0x04, 0xa4, 0xff, 0x24, 0x01, 0x12, 0x14, 0x9d, 0xe5, 0x0a, //0x8a40,
	0xf0, 0xef, 0x24, 0x02, 0xff, 0xee, 0x34, 0x60, 0x8f, 0x82, 0xf5, 0x83, 0xe5, 0x0b, 0xf0, 0xec, //0x8a50,
	0x75, 0xf0, 0x04, 0xa4, 0xff, 0x24, 0x03, 0x12, 0x14, 0x9d, 0xe9, 0xf0, 0xef, 0x24, 0x04, 0xff, //0x8a60,
	0xee, 0x34, 0x60, 0x8f, 0x82, 0xf5, 0x83, 0xed, 0xf0, 0x0c, 0xbc, 0x05, 0xc6, 0x90, 0x30, 0x01, //0x8a70,
	0xe0, 0x44, 0x40, 0xf0, 0xe0, 0x54, 0xbf, 0xf0, 0x22, 0xef, 0x8d, 0xf0, 0xa4, 0xa8, 0xf0, 0xcf, //0x8a80,
	0x8c, 0xf0, 0xa4, 0x28, 0xce, 0x8d, 0xf0, 0xa4, 0x2e, 0xfe, 0x22, 0xbc, 0x00, 0x0b, 0xbe, 0x00, //0x8a90,
	0x29, 0xef, 0x8d, 0xf0, 0x84, 0xff, 0xad, 0xf0, 0x22, 0xe4, 0xcc, 0xf8, 0x75, 0xf0, 0x08, 0xef, //0x8aa0,
	0x2f, 0xff, 0xee, 0x33, 0xfe, 0xec, 0x33, 0xfc, 0xee, 0x9d, 0xec, 0x98, 0x40, 0x05, 0xfc, 0xee, //0x8ab0,
	0x9d, 0xfe, 0x0f, 0xd5, 0xf0, 0xe9, 0xe4, 0xce, 0xfd, 0x22, 0xed, 0xf8, 0xf5, 0xf0, 0xee, 0x84, //0x8ac0,
	0x20, 0xd2, 0x1c, 0xfe, 0xad, 0xf0, 0x75, 0xf0, 0x08, 0xef, 0x2f, 0xff, 0xed, 0x33, 0xfd, 0x40, //0x8ad0,
	0x07, 0x98, 0x50, 0x06, 0xd5, 0xf0, 0xf2, 0x22, 0xc3, 0x98, 0xfd, 0x0f, 0xd5, 0xf0, 0xea, 0x22, //0x8ae0,
	0xe8, 0x8f, 0xf0, 0xa4, 0xcc, 0x8b, 0xf0, 0xa4, 0x2c, 0xfc, 0xe9, 0x8e, 0xf0, 0xa4, 0x2c, 0xfc, //0x8af0,
	0x8a, 0xf0, 0xed, 0xa4, 0x2c, 0xfc, 0xea, 0x8e, 0xf0, 0xa4, 0xcd, 0xa8, 0xf0, 0x8b, 0xf0, 0xa4, //0x8b00,
	0x2d, 0xcc, 0x38, 0x25, 0xf0, 0xfd, 0xe9, 0x8f, 0xf0, 0xa4, 0x2c, 0xcd, 0x35, 0xf0, 0xfc, 0xeb, //0x8b10,
	0x8e, 0xf0, 0xa4, 0xfe, 0xa9, 0xf0, 0xeb, 0x8f, 0xf0, 0xa4, 0xcf, 0xc5, 0xf0, 0x2e, 0xcd, 0x39, //0x8b20,
	0xfe, 0xe4, 0x3c, 0xfc, 0xea, 0xa4, 0x2d, 0xce, 0x35, 0xf0, 0xfd, 0xe4, 0x3c, 0xfc, 0x22, 0x75, //0x8b30,
	0xf0, 0x08, 0x75, 0x82, 0x00, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xcd, 0x33, 0xcd, 0xcc, 0x33, //0x8b40,
	0xcc, 0xc5, 0x82, 0x33, 0xc5, 0x82, 0x9b, 0xed, 0x9a, 0xec, 0x99, 0xe5, 0x82, 0x98, 0x40, 0x0c, //0x8b50,
	0xf5, 0x82, 0xee, 0x9b, 0xfe, 0xed, 0x9a, 0xfd, 0xec, 0x99, 0xfc, 0x0f, 0xd5, 0xf0, 0xd6, 0xe4, //0x8b60,
	0xce, 0xfb, 0xe4, 0xcd, 0xfa, 0xe4, 0xcc, 0xf9, 0xa8, 0x82, 0x22, 0xb8, 0x00, 0xc1, 0xb9, 0x00, //0x8b70,
	0x59, 0xba, 0x00, 0x2d, 0xec, 0x8b, 0xf0, 0x84, 0xcf, 0xce, 0xcd, 0xfc, 0xe5, 0xf0, 0xcb, 0xf9, //0x8b80,
	0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xeb, 0x33, //0x8b90,
	0xfb, 0x10, 0xd7, 0x03, 0x99, 0x40, 0x04, 0xeb, 0x99, 0xfb, 0x0f, 0xd8, 0xe5, 0xe4, 0xf9, 0xfa, //0x8ba0,
	0x22, 0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xc9, //0x8bb0,
	0x33, 0xc9, 0x10, 0xd7, 0x05, 0x9b, 0xe9, 0x9a, 0x40, 0x07, 0xec, 0x9b, 0xfc, 0xe9, 0x9a, 0xf9, //0x8bc0,
	0x0f, 0xd8, 0xe0, 0xe4, 0xc9, 0xfa, 0xe4, 0xcc, 0xfb, 0x22, 0x75, 0xf0, 0x10, 0xef, 0x2f, 0xff, //0x8bd0,
	0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xcc, 0x33, 0xcc, 0xc8, 0x33, 0xc8, 0x10, 0xd7, 0x07, 0x9b, //0x8be0,
	0xec, 0x9a, 0xe8, 0x99, 0x40, 0x0a, 0xed, 0x9b, 0xfd, 0xec, 0x9a, 0xfc, 0xe8, 0x99, 0xf8, 0x0f, //0x8bf0,
	0xd5, 0xf0, 0xda, 0xe4, 0xcd, 0xfb, 0xe4, 0xcc, 0xfa, 0xe4, 0xc8, 0xf9, 0x22, 0xeb, 0x9f, 0xf5, //0x8c00,
	0xf0, 0xea, 0x9e, 0x42, 0xf0, 0xe9, 0x9d, 0x42, 0xf0, 0xe8, 0x9c, 0x45, 0xf0, 0x22, 0xe8, 0x60, //0x8c10,
	0x0f, 0xec, 0xc3, 0x13, 0xfc, 0xed, 0x13, 0xfd, 0xee, 0x13, 0xfe, 0xef, 0x13, 0xff, 0xd8, 0xf1, //0x8c20,
	0x22, 0xe8, 0x60, 0x0f, 0xef, 0xc3, 0x33, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, //0x8c30,
	0xfc, 0xd8, 0xf1, 0x22, 0xe4, 0x93, 0xfc, 0x74, 0x01, 0x93, 0xfd, 0x74, 0x02, 0x93, 0xfe, 0x74, //0x8c40,
	0x03, 0x93, 0xff, 0x22, 0xa4, 0x25, 0x82, 0xf5, 0x82, 0xe5, 0xf0, 0x35, 0x83, 0xf5, 0x83, 0x22, //0x8c50,
	0xd0, 0x83, 0xd0, 0x82, 0xf8, 0xe4, 0x93, 0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0d, 0xa3, 0xa3, //0x8c60,
	0x93, 0xf8, 0x74, 0x01, 0x93, 0xf5, 0x82, 0x88, 0x83, 0xe4, 0x73, 0x74, 0x02, 0x93, 0x68, 0x60, //0x8c70,
	0xef, 0xa3, 0xa3, 0xa3, 0x80, 0xdf, 0x90, 0x0e, 0x9a, 0x12, 0x0f, 0x65, 0x78, 0x98, 0xe6, 0xf5, //0x8c80,
	0x0f, 0x08, 0xe6, 0xf5, 0x10, 0xe4, 0xfd, 0xed, 0xc3, 0x94, 0x08, 0x50, 0x18, 0xe5, 0x10, 0x94, //0x8c90,
	0x00, 0xe5, 0x0f, 0x94, 0x78, 0x50, 0x0e, 0xe5, 0x10, 0x25, 0xe0, 0xf5, 0x10, 0xe5, 0x0f, 0x33, //0x8ca0,
	0xf5, 0x0f, 0x1d, 0x80, 0xe2, 0xc3, 0x74, 0x07, 0x9d, 0xfd, 0xc3, 0x94, 0x00, 0x50, 0x02, 0xe4, //0x8cb0,
	0xfd, 0x12, 0x0e, 0xca, 0xed, 0x90, 0x0d, 0xd5, 0x12, 0x0f, 0x8a, 0x12, 0x0a, 0xf0, 0x12, 0x0e, //0x8cc0,
	0xc2, 0xc0, 0x00, 0x78, 0xd0, 0xe6, 0x12, 0x0f, 0x25, 0xff, 0x33, 0x95, 0xe0, 0xfe, 0x74, 0xc4, //0x8cd0,
	0x2f, 0xf5, 0x82, 0x74, 0x0d, 0x12, 0x0f, 0x39, 0xd0, 0x00, 0x12, 0x0a, 0xf0, 0x12, 0x0e, 0xc2, //0x8ce0,
	0xc0, 0x00, 0xc0, 0x01, 0xc3, 0x79, 0xbf, 0xe7, 0x78, 0xbe, 0x96, 0x12, 0x0f, 0x25, 0xff, 0x33, //0x8cf0,
	0x95, 0xe0, 0xfe, 0x74, 0xb3, 0x2f, 0xf5, 0x82, 0x74, 0x0d, 0x12, 0x0f, 0x39, 0xd0, 0x01, 0xd0, //0x8d00,
	0x00, 0x12, 0x0e, 0xb2, 0x90, 0x0d, 0xee, 0x12, 0x0f, 0x89, 0x12, 0x0e, 0xb2, 0xc0, 0x00, 0xc0, //0x8d10,
	0x01, 0xc3, 0x79, 0xcf, 0xe7, 0x78, 0xce, 0x96, 0x12, 0x0f, 0x25, 0xff, 0x33, 0x95, 0xe0, 0xfe, //0x8d20,
	0x74, 0xdd, 0x2f, 0xf5, 0x82, 0x74, 0x0d, 0x12, 0x0f, 0x39, 0xd0, 0x01, 0xd0, 0x00, 0x12, 0x0f, //0x8d30,
	0x44, 0x78, 0x0e, 0x12, 0x0e, 0xbf, 0xc0, 0x00, 0x78, 0x98, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0xe4, //0x8d40,
	0xfc, 0xfd, 0xd0, 0x00, 0x12, 0x0f, 0x44, 0x78, 0x0e, 0x12, 0x0c, 0x1e, 0x12, 0x0f, 0x47, 0x90, //0x8d50,
	0x0e, 0x9b, 0x12, 0x0f, 0x89, 0x12, 0x0e, 0xca, 0xc3, 0x12, 0x0c, 0x0d, 0x50, 0x06, 0x90, 0x0e, //0x8d60,
	0x9b, 0x12, 0x0f, 0x65, 0x78, 0xc9, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, 0xe6, 0xff, 0xe4, 0xfc, //0x8d70,
	0xfd, 0x12, 0x0e, 0xca, 0xd3, 0x12, 0x0c, 0x0d, 0x40, 0x07, 0xe4, 0xf5, 0x0f, 0xf5, 0x10, 0x80, //0x8d80,
	0x1a, 0x85, 0x0d, 0x0f, 0x85, 0x0e, 0x10, 0x78, 0xc9, 0xe6, 0x25, 0xe0, 0x24, 0x57, 0xf8, 0xc3, //0x8d90,
	0xe6, 0x95, 0x10, 0xf5, 0x10, 0x18, 0xe6, 0x95, 0x0f, 0xf5, 0x0f, 0x78, 0x9c, 0xa6, 0x0f, 0x08, //0x8da0,
	0xa6, 0x10, 0x22, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, //0x8db0,
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, //0x8dc0,
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x10, 0x18, 0x20, //0x8dd0,
	0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x80, 0x80, 0x80, 0x80, //0x8de0,
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x8df0,
	0x13, 0x04, 0x26, 0x15, 0x01, 0x36, 0x4f, 0x56, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x01, //0x8e00,
	0x10, 0x00, 0x56, 0x45, 0x1a, 0x30, 0x29, 0x7e, 0x00, 0x30, 0x04, 0x20, 0xdf, 0x30, 0x05, 0x40, //0x8e10,
	0xbf, 0x50, 0x03, 0x00, 0xfd, 0x50, 0x27, 0x01, 0xfe, 0x60, 0x00, 0x13, 0x00, 0x36, 0x06, 0x07, //0x8e20,
	0x00, 0x3f, 0x05, 0x30, 0x00, 0x3f, 0x06, 0x22, 0x00, 0x3f, 0x08, 0x00, 0x00, 0x3f, 0x09, 0x00, //0x8e30,
	0x00, 0x3f, 0x0a, 0x00, 0x00, 0x3f, 0x0b, 0x0f, 0x00, 0x3f, 0x01, 0x2a, 0x00, 0x3f, 0x02, 0x00, //0x8e40,
	0x00, 0x30, 0x01, 0x40, 0xbf, 0x30, 0x01, 0x00, 0xbf, 0x30, 0x29, 0x70, 0x00, 0x3a, 0x00, 0x00, //0x8e50,
	0xff, 0x3a, 0x00, 0x00, 0xff, 0x36, 0x03, 0x36, 0x02, 0x41, 0x44, 0x58, 0x20, 0x18, 0x10, 0x0a, //0x8e60,
	0x04, 0x04, 0x00, 0x03, 0xff, 0x64, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, //0x8e70,
	0x04, 0x06, 0x06, 0x00, 0x02, 0x64, 0x00, 0xcc, 0x50, 0x28, 0x1e, 0x08, 0x08, 0x01, 0x1e, 0x1e, //0x8e80,8e84
	0x1e, 0x1e, 0x68, 0x68, 0x68, 0x68, 0x03, 0x05, 0x0a, 0x08, 0x10, 0x01, 0x0a, 0x06, 0x06, 0x05, //0x8e90,98/98 9/5
	0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x04, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0xa5, //0x8ea0,
	0x5a, 0x00, 0x12, 0x0a, 0xf0, 0x8f, 0x0e, 0x8e, 0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0x78, 0x07, 0x12, //0x8eb0,
	0x0c, 0x1e, 0x8f, 0x0e, 0x8e, 0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0xab, 0x0e, 0xaa, 0x0d, 0xa9, 0x0c, //0x8ec0,
	0xa8, 0x0b, 0x22, 0xef, 0x25, 0xe0, 0x24, 0x56, 0xf8, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0xee, 0x25, //0x8ed0,
	0xe0, 0x24, 0x56, 0xf8, 0xe6, 0x22, 0x78, 0xce, 0xf9, 0xc3, 0xe7, 0x64, 0x80, 0xf5, 0xf0, 0xe6, //0x8ee0,
	0x64, 0x80, 0x95, 0xf0, 0x22, 0x78, 0xcb, 0xe6, 0x78, 0x9d, 0x25, 0xe0, 0x24, 0x57, 0xf9, 0xd3, //0x8ef0,
	0xe7, 0x96, 0x19, 0xe7, 0x18, 0x96, 0x22, 0x78, 0xcf, 0xf9, 0xd3, 0xe7, 0x64, 0x80, 0xf5, 0xf0, //0x8f00,
	0xe6, 0x64, 0x80, 0x95, 0xf0, 0x22, 0xd3, 0x78, 0xc1, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x22, 0x78, //0x8f10,
	0xc1, 0xe6, 0xf4, 0x04, 0xff, 0xa2, 0xe7, 0x13, 0xa2, 0xe7, 0x13, 0x22, 0xa6, 0x06, 0x08, 0xa6, //0x8f20,
	0x07, 0x78, 0x9a, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x22, 0x3e, 0xf5, 0x83, 0xe4, 0x93, 0xff, 0xe4, //0x8f30,
	0xfc, 0xfd, 0xfe, 0x22, 0x12, 0x0a, 0xf0, 0x8f, 0x0e, 0x8e, 0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0x22, //0x8f40,
	0x78, 0xc9, 0xe6, 0x24, 0x9e, 0xf8, 0xe6, 0x78, 0xd0, 0xf6, 0x22, 0xc3, 0xe6, 0x64, 0x80, 0xf8, //0x8f50,
	0xef, 0x64, 0x80, 0x98, 0x22, 0xe4, 0x93, 0xff, 0xe4, 0x8f, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0xf5, //0x8f60,
	0x0b, 0x22, 0x78, 0xc1, 0xe6, 0xf4, 0x04, 0xf6, 0x22, 0xfa, 0x08, 0xe6, 0xc3, 0x9d, 0xea, 0x9c, //0x8f70,
	0x22, 0xf6, 0xd3, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x22, 0xe4, 0x93, 0xff, 0xe4, 0xfc, 0xfd, 0xfe, //0x8f80,
	0x22, 0x78, 0x98, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x22, 0x78, 0xc5, 0xe6, 0x24, 0x9e, 0xf8, 0x22, //0x8f90,
	0x78, 0xd0, 0xe6, 0x78, 0xc4, 0xf6, 0x22, 0x85, 0x28, 0x46, 0x90, 0x30, 0x24, 0xe0, 0xf5, 0x42, //0x8fa0,
	0xa3, 0xe0, 0xf5, 0x43, 0xa3, 0xe0, 0xf5, 0x44, 0xa3, 0xe0, 0xf5, 0x45, 0xa3, 0xe0, 0xf5, 0x41, //0x8fb0,
	0xd2, 0x35, 0xe5, 0x46, 0x12, 0x0c, 0x60, 0x0f, 0xf2, 0x03, 0x0f, 0xff, 0x04, 0x10, 0x10, 0x05, //0x8fc0,
	0x10, 0x13, 0x06, 0x10, 0x63, 0x07, 0x10, 0x1c, 0x08, 0x10, 0x31, 0x12, 0x10, 0x40, 0x1a, 0x10, //0x8fd0,
	0x4b, 0x1b, 0x10, 0x31, 0x80, 0x10, 0x2c, 0x81, 0x10, 0x63, 0xdc, 0x10, 0x53, 0xec, 0x00, 0x00, //0x8fe0,
	0x10, 0x7e, 0x12, 0x15, 0x4e, 0xd2, 0x37, 0xd2, 0x01, 0xc2, 0x02, 0x12, 0x15, 0x53, 0x22, 0xd2, //0x8ff0,
	0x34, 0xd2, 0x37, 0xe5, 0x42, 0xd3, 0x94, 0x00, 0x40, 0x03, 0x12, 0x15, 0x4e, 0xd2, 0x03, 0x22, //0x9000,
	0xd2, 0x03, 0x22, 0xc2, 0x03, 0x20, 0x01, 0x66, 0x30, 0x02, 0x48, 0x22, 0xc2, 0x01, 0xc2, 0x02, //0x9010,
	0xc2, 0x03, 0x12, 0x13, 0xc5, 0x75, 0x1d, 0x70, 0xd2, 0x36, 0x80, 0x37, 0x43, 0x41, 0x10, 0x80, //0x9020,
	0x0a, 0xe5, 0x41, 0x70, 0x03, 0xc3, 0x80, 0x01, 0xd3, 0x92, 0x39, 0x12, 0x08, 0x60, 0x80, 0x23, //0x9030,
	0x85, 0x45, 0x4e, 0x85, 0x41, 0x4f, 0x12, 0x12, 0xaf, 0x80, 0x18, 0x85, 0x4e, 0x45, 0x85, 0x4f, //0x9040,
	0x41, 0x80, 0x10, 0xc2, 0xaf, 0x85, 0x2a, 0x42, 0x85, 0x2b, 0x43, 0x85, 0x2c, 0x44, 0x85, 0x2d, //0x9050,
	0x45, 0xd2, 0xaf, 0x90, 0x30, 0x24, 0xe5, 0x42, 0xf0, 0xa3, 0xe5, 0x43, 0xf0, 0xa3, 0xe5, 0x44, //0x9060,
	0xf0, 0xa3, 0xe5, 0x45, 0xf0, 0xa3, 0xe5, 0x41, 0xf0, 0x90, 0x30, 0x23, 0xe4, 0xf0, 0x22, 0x78, //0x9070,
	0xc8, 0xe6, 0xf5, 0x0b, 0x18, 0xe6, 0xf5, 0x0c, 0xe4, 0xf5, 0x0d, 0xf5, 0x0e, 0xf5, 0x0f, 0xf9, //0x9080,
	0x78, 0xc9, 0xe6, 0x08, 0xf6, 0x78, 0xc7, 0xe6, 0xff, 0x04, 0xfe, 0x78, 0xc8, 0x12, 0x0f, 0x5b, //0x9090,
	0x50, 0x54, 0x12, 0x0e, 0xd3, 0xfa, 0x08, 0xe6, 0xd3, 0x9d, 0xea, 0x9c, 0x40, 0x14, 0x05, 0x0f, //0x90a0,
	0xd3, 0xe5, 0x0e, 0x64, 0x80, 0xf8, 0xe9, 0x64, 0x80, 0x98, 0x40, 0x02, 0x89, 0x0e, 0xe4, 0xf9, //0x90b0,
	0x80, 0x1b, 0x12, 0x0e, 0xd3, 0x12, 0x0f, 0x79, 0x50, 0x13, 0x09, 0xe5, 0x0d, 0x64, 0x80, 0xf8, //0x90c0,
	0xe5, 0x0f, 0x64, 0x80, 0x98, 0x40, 0x03, 0x85, 0x0f, 0x0d, 0xe4, 0xf5, 0x0f, 0x78, 0xc9, 0xe6, //0x90d0,
	0x12, 0x0e, 0xd4, 0xfa, 0x08, 0xe6, 0xb5, 0x05, 0x08, 0xea, 0xb5, 0x04, 0x04, 0x78, 0xca, 0xa6, //0x90e0,
	0x06, 0x0f, 0x0e, 0x02, 0x10, 0x9b, 0x78, 0xc7, 0xe6, 0xf5, 0x0c, 0xe6, 0x04, 0xff, 0x78, 0xc9, //0x90f0,
	0x12, 0x0f, 0x5b, 0x50, 0x17, 0xe5, 0x0c, 0x12, 0x0e, 0xdf, 0xfc, 0x08, 0xe6, 0xfd, 0xef, 0x12, //0x9100,
	0x0e, 0xdf, 0x12, 0x0f, 0x79, 0x50, 0x02, 0x8f, 0x0c, 0x0f, 0x80, 0xe2, 0x78, 0xc8, 0xe6, 0xf5, //0x9110,
	0x0b, 0xe6, 0x14, 0xff, 0x78, 0xca, 0xd3, 0x12, 0x0f, 0x5c, 0x40, 0x17, 0xe5, 0x0b, 0x12, 0x0e, //0x9120,
	0xdf, 0xfc, 0x08, 0xe6, 0xfd, 0xef, 0x12, 0x0e, 0xdf, 0x12, 0x0f, 0x79, 0x50, 0x02, 0x8f, 0x0b, //0x9130,
	0x1f, 0x80, 0xe1, 0x78, 0xcb, 0xa6, 0x0c, 0x08, 0xa6, 0x0b, 0x22, 0xe5, 0x0a, 0x75, 0xf0, 0x03, //0x9140,
	0xa4, 0x24, 0xb3, 0x25, 0x0b, 0xf8, 0xe6, 0x22, 0xad, 0x11, 0xac, 0x10, 0xfa, 0xf9, 0xf8, 0x12, //0x9150,
	0x0a, 0xf0, 0x8f, 0x13, 0x8e, 0x12, 0x8d, 0x11, 0x8c, 0x10, 0xab, 0x0f, 0xaa, 0x0e, 0xa9, 0x0d, //0x9160,
	0xa8, 0x0c, 0x22, 0xe5, 0x0a, 0x75, 0xf0, 0x08, 0xa4, 0x24, 0x5a, 0xf8, 0xe5, 0x0b, 0x25, 0xe0, //0x9170,
	0x28, 0x22, 0xa6, 0x04, 0x08, 0xa6, 0x05, 0xef, 0x25, 0xe0, 0x25, 0xe0, 0x24, 0x2c, 0xf8, 0xe6, //0x9180,
	0xfe, 0x08, 0xe6, 0xff, 0x22, 0xe5, 0x0b, 0x93, 0xff, 0xe4, 0xfc, 0xfd, 0xfe, 0x12, 0x0a, 0xf0, //0x9190,
	0x8f, 0x0f, 0x8e, 0x0e, 0x8d, 0x0d, 0x8c, 0x0c, 0x22, 0x90, 0x0e, 0x8d, 0xe4, 0x93, 0xff, 0x25, //0x91a0,
	0xe0, 0x25, 0xe0, 0x24, 0x2a, 0xf8, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0x22, 0x78, 0xaa, 0xe6, 0x75, //0x91b0,
	0xf0, 0x08, 0xa4, 0x22, 0xf8, 0xa6, 0x33, 0x78, 0xaa, 0xe6, 0x75, 0xf0, 0x03, 0xa4, 0x22, 0xe5, //0x91c0,
	0x0b, 0x25, 0xe0, 0x24, 0x5a, 0xf8, 0xe6, 0x22, 0x08, 0xa6, 0x2a, 0x08, 0xa6, 0x2b, 0x08, 0xa6, //0x91d0,
	0x2c, 0x08, 0xa6, 0x2d, 0x22, 0xe5, 0x0b, 0x24, 0x04, 0xff, 0x74, 0x01, 0xa8, 0x07, 0x08, 0x22, //0x91e0,
	0xe4, 0x8f, 0x0f, 0x8e, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0x22, 0x74, 0xb3, 0x25, 0x0b, 0xf8, 0xe6, //0x91f0,
	0x22, 0xc0, 0xe0, 0xc0, 0x83, 0xc0, 0x82, 0xc0, 0xd0, 0x90, 0x3f, 0x0c, 0xe0, 0xf5, 0x08, 0xe5, //0x9200,
	0x08, 0x30, 0xe3, 0x60, 0x30, 0x37, 0x52, 0x90, 0x60, 0x19, 0xe0, 0xf5, 0x2a, 0xa3, 0xe0, 0xf5, //0x9210,
	0x2b, 0x90, 0x60, 0x1d, 0xe0, 0xf5, 0x2c, 0xa3, 0xe0, 0xf5, 0x2d, 0x90, 0x60, 0x21, 0xe0, 0xf5, //0x9220,
	0x2e, 0xa3, 0xe0, 0xf5, 0x2f, 0x90, 0x60, 0x25, 0xe0, 0xf5, 0x30, 0xa3, 0xe0, 0xf5, 0x31, 0x30, //0x9230,
	0x01, 0x06, 0x30, 0x34, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x09, 0x30, 0x02, 0x06, 0x30, 0x34, //0x9240,
	0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0a, 0x30, 0x34, 0x0c, 0x30, 0x03, 0x09, 0x20, 0x02, 0x06, //0x9250,
	0x20, 0x01, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0b, 0x90, 0x30, 0x01, 0xe0, 0x44, 0x40, 0xf0, //0x9260,
	0xe0, 0x54, 0xbf, 0xf0, 0xe5, 0x08, 0x30, 0xe1, 0x14, 0x30, 0x35, 0x11, 0x90, 0x30, 0x22, 0xe0, //0x9270,
	0xf5, 0x28, 0xe4, 0xf0, 0x30, 0x00, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x08, 0xe5, 0x08, 0x30, //0x9280,
	0xe2, 0x0e, 0x90, 0x51, 0xa5, 0xe0, 0xf5, 0x33, 0xa3, 0xe0, 0xf5, 0x34, 0xa3, 0xe0, 0xf5, 0x35, //0x9290,
	0x90, 0x3f, 0x0c, 0xe5, 0x08, 0xf0, 0xd0, 0xd0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32, 0xe5, //0x92a0,
	0x4f, 0xd3, 0x94, 0x40, 0x40, 0x04, 0x7f, 0x40, 0x80, 0x02, 0xaf, 0x4f, 0x8f, 0x4f, 0x90, 0x0e, //0x92b0,
	0x86, 0xe4, 0x93, 0xfe, 0x74, 0x01, 0x93, 0xff, 0xc3, 0x90, 0x0e, 0x84, 0x74, 0x01, 0x93, 0x9f, //0x92c0,
	0xff, 0xe4, 0x93, 0x9e, 0xfe, 0xe4, 0x8f, 0x12, 0x8e, 0x11, 0xf5, 0x10, 0xf5, 0x0f, 0xab, 0x12, //0x92d0,
	0xaa, 0x11, 0xa9, 0x10, 0xa8, 0x0f, 0xaf, 0x4f, 0xfc, 0xfd, 0xfe, 0x12, 0x0a, 0xf0, 0x12, 0x14, //0x92e0,
	0xfd, 0xe4, 0x7b, 0x40, 0xfa, 0xf9, 0xf8, 0x12, 0x0b, 0x7b, 0x12, 0x14, 0xfd, 0x90, 0x0e, 0x71, //0x92f0,
	0xe4, 0x12, 0x15, 0x12, 0x12, 0x14, 0xfd, 0xe4, 0x85, 0x4e, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0xf5, //0x9300,
	0x0b, 0xaf, 0x0e, 0xae, 0x0d, 0xad, 0x0c, 0xac, 0x0b, 0xa3, 0x12, 0x15, 0x12, 0x8f, 0x0e, 0x8e, //0x9310,
	0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0xe5, 0x12, 0x45, 0x0e, 0xf5, 0x12, 0xe5, 0x11, 0x45, 0x0d, 0xf5, //0x9320,
	0x11, 0xe5, 0x10, 0x45, 0x0c, 0xf5, 0x10, 0xe5, 0x0f, 0x45, 0x0b, 0xf5, 0x0f, 0xe4, 0xf5, 0x22, //0x9330,
	0xf5, 0x23, 0x85, 0x12, 0x40, 0x85, 0x11, 0x3f, 0x85, 0x10, 0x3e, 0x85, 0x0f, 0x3d, 0x02, 0x14, //0x9340,
	0xaf, 0x75, 0x89, 0x03, 0x75, 0xa8, 0x01, 0x75, 0xb8, 0x04, 0x75, 0x0a, 0xff, 0x75, 0x0b, 0x0e, //0x9350,
	0x75, 0x0c, 0x15, 0x75, 0x0d, 0x0f, 0x12, 0x14, 0x36, 0x12, 0x08, 0x60, 0xc2, 0x39, 0x12, 0x00, //0x9360,
	0x06, 0xd2, 0x00, 0xd2, 0x35, 0xd2, 0xaf, 0x75, 0x0a, 0xff, 0x75, 0x0b, 0x0e, 0x75, 0x0c, 0x51, //0x9370,
	0x75, 0x0d, 0x03, 0x12, 0x14, 0x36, 0x30, 0x08, 0x09, 0xc2, 0x35, 0x12, 0x0f, 0xa7, 0xc2, 0x08, //0x9380,
	0xd2, 0x35, 0x30, 0x0b, 0x09, 0xc2, 0x37, 0x12, 0x04, 0xa8, 0xc2, 0x0b, 0xd2, 0x37, 0x30, 0x09, //0x9390,
	0x09, 0xc2, 0x37, 0x12, 0x00, 0x0e, 0xc2, 0x09, 0xd2, 0x37, 0x30, 0x0e, 0x03, 0x12, 0x08, 0x60, //0x93a0,
	0x30, 0x36, 0xd3, 0x90, 0x30, 0x29, 0xe5, 0x1d, 0xf0, 0xb4, 0x10, 0x05, 0x90, 0x30, 0x23, 0xe4, //0x93b0,
	0xf0, 0xc2, 0x36, 0x80, 0xc1, 0xe4, 0xf5, 0x4f, 0x90, 0x0e, 0x82, 0x93, 0xff, 0xe4, 0x8f, 0x0d, //0x93c0,
	0xf5, 0x0c, 0xf5, 0x0b, 0xf5, 0x0a, 0xaf, 0x0d, 0xae, 0x0c, 0xad, 0x0b, 0xac, 0x0a, 0x90, 0x0e, //0x93d0,
	0x72, 0x12, 0x15, 0x12, 0x8f, 0x0d, 0x8e, 0x0c, 0x8d, 0x0b, 0x8c, 0x0a, 0x90, 0x0e, 0x7a, 0x12, //0x93e0,
	0x0c, 0x44, 0xef, 0x45, 0x0d, 0xf5, 0x0d, 0xee, 0x45, 0x0c, 0xf5, 0x0c, 0xed, 0x45, 0x0b, 0xf5, //0x93f0,
	0x0b, 0xec, 0x45, 0x0a, 0xf5, 0x0a, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x85, 0x0d, 0x40, 0x85, 0x0c, //0x9400,
	0x3f, 0x85, 0x0b, 0x3e, 0x85, 0x0a, 0x3d, 0x12, 0x14, 0xaf, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90, //0x9410,
	0x0e, 0x7a, 0x12, 0x15, 0x06, 0x12, 0x14, 0xaf, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90, 0x0e, 0x76, //0x9420,
	0x12, 0x15, 0x06, 0x02, 0x14, 0xaf, 0xae, 0x0b, 0xaf, 0x0c, 0xe4, 0xfd, 0xed, 0xc3, 0x95, 0x0d, //0x9430,
	0x50, 0x33, 0x12, 0x15, 0x68, 0xe4, 0x93, 0xf5, 0x0e, 0x74, 0x01, 0x93, 0xf5, 0x0f, 0x45, 0x0e, //0x9440,
	0x60, 0x23, 0x85, 0x0f, 0x82, 0x85, 0x0e, 0x83, 0xe0, 0xfc, 0x12, 0x15, 0x68, 0x74, 0x03, 0x93, //0x9450,
	0x52, 0x04, 0x12, 0x15, 0x68, 0x74, 0x02, 0x93, 0x42, 0x04, 0x85, 0x0f, 0x82, 0x85, 0x0e, 0x83, //0x9460,
	0xec, 0xf0, 0x0d, 0x80, 0xc7, 0x22, 0x7e, 0x00, 0xad, 0x03, 0xac, 0x02, 0x12, 0x0a, 0x89, 0x8e, //0x9470,
	0x0e, 0x8f, 0x0f, 0x22, 0x12, 0x0a, 0x89, 0x8e, 0x10, 0x8f, 0x11, 0x90, 0x0e, 0x88, 0xe4, 0x93, //0x9480,
	0x22, 0xc3, 0xe5, 0x0d, 0x9f, 0xf5, 0x0d, 0xe5, 0x0c, 0x9e, 0xf5, 0x0c, 0x22, 0xae, 0xf0, 0xfb, //0x9490,
	0xee, 0x34, 0x60, 0x8b, 0x82, 0xf5, 0x83, 0x22, 0xe0, 0xfe, 0xa3, 0xe0, 0xfd, 0xed, 0x22, 0xa2, //0x94a0,
	0xaf, 0x92, 0x33, 0xc2, 0xaf, 0xe5, 0x23, 0x45, 0x22, 0x90, 0x0e, 0x65, 0x60, 0x0e, 0x12, 0x15, //0x94b0,
	0x43, 0xe0, 0xf5, 0x3b, 0x12, 0x15, 0x40, 0xe0, 0xf5, 0x3c, 0x80, 0x0c, 0x12, 0x15, 0x43, 0xe5, //0x94c0,
	0x3f, 0xf0, 0x12, 0x15, 0x40, 0xe5, 0x40, 0xf0, 0xa2, 0x33, 0x92, 0xaf, 0x22, 0x78, 0xcc, 0x12, //0x94d0,
	0x0e, 0xf7, 0x40, 0x0d, 0x12, 0x0e, 0xf5, 0x40, 0x04, 0xe4, 0xff, 0x80, 0x0f, 0x7f, 0x01, 0x80, //0x94e0,
	0x0b, 0x12, 0x0e, 0xf5, 0x40, 0x04, 0x7f, 0xff, 0x80, 0x02, 0x7f, 0xfe, 0x22, 0x8f, 0x12, 0x8e, //0x94f0,
	0x11, 0x8d, 0x10, 0x8c, 0x0f, 0x22, 0x12, 0x0c, 0x44, 0x8f, 0x40, 0x8e, 0x3f, 0x8d, 0x3e, 0x8c, //0x9500,
	0x3d, 0x22, 0x93, 0xf9, 0xf8, 0x02, 0x0c, 0x31, 0xc0, 0xe0, 0xc0, 0x83, 0xc0, 0x82, 0x90, 0x3f, //0x9510,
	0x0d, 0xe0, 0xf5, 0x09, 0xe5, 0x09, 0xf0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32, 0xc3, 0xee, //0x9520,
	0x64, 0x80, 0x94, 0x80, 0x40, 0x02, 0x80, 0x07, 0xc3, 0xe4, 0x9f, 0xff, 0xe4, 0x9e, 0xfe, 0x22, //0x9530,
	0x90, 0x0e, 0x67, 0xe4, 0x93, 0xfe, 0x74, 0x01, 0x93, 0xf5, 0x82, 0x8e, 0x83, 0x22, 0xd2, 0x01, //0x9540,
	0xc2, 0x02, 0xe4, 0xf5, 0x1e, 0xf5, 0x1d, 0xd2, 0x36, 0xd2, 0x34, 0x22, 0x78, 0x7f, 0xe4, 0xf6, //0x9550,
	0xd8, 0xfd, 0x75, 0x81, 0xd1, 0x02, 0x13, 0x51, 0x8f, 0x82, 0x8e, 0x83, 0x75, 0xf0, 0x04, 0xed, //0x9560,
	0x02, 0x0c, 0x54, 
};

//Reset  MCU
static struct misensor_reg const ov5645_reset_mcu[] = {
{MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
{MISENSOR_8BIT, 0x3000, 0x20},
{MISENSOR_8BIT, 0x3001, 0x08},
{MISENSOR_8BIT, 0x3004, 0xef},
{MISENSOR_8BIT, 0x3005, 0xf7},
{MISENSOR_TOK_TERM, 0, 0}
};

static struct misensor_reg const ov5645_enable_mcu[] = {
{MISENSOR_8BIT, 0x3212, 0x03}, // start group 3
{MISENSOR_8BIT, 0x3022, 0x00},
{MISENSOR_8BIT, 0x3023, 0x00},
{MISENSOR_8BIT, 0x3024, 0x00},
{MISENSOR_8BIT, 0x3025, 0x00},
{MISENSOR_8BIT, 0x3026, 0x00},
{MISENSOR_8BIT, 0x3027, 0x00},
{MISENSOR_8BIT, 0x3028, 0x00},
{MISENSOR_8BIT, 0x3029, 0x7f}, 
{MISENSOR_8BIT, 0x3000, 0x00}, 
{MISENSOR_TOK_TERM, 0, 0}
};
//Enable MCU

//End    [song.yuanqiao@byd.com,2013-08-16]
#endif
